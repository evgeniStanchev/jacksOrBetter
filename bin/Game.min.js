var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var poker;
(function (poker) {
    var Notifications = /** @class */ (function () {
        function Notifications() {
        }
        Notifications.RESOURCES_LOADED = "resourcesLoaded";
        Notifications.DRAW = 'draw';
        Notifications.DEAL = 'deal';
        Notifications.COLLECT = 'collect';
        Notifications.END = 'end';
        return Notifications;
    }());
    poker.Notifications = Notifications;
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var views;
(function (views) {
    var GameView = /** @class */ (function (_super) {
        __extends(GameView, _super);
        function GameView() {
            var _this = _super.call(this) || this;
            var background = PIXI.Sprite.fromImage("./assets/background.png");
            _this.addChild(background);
            return _this;
        }
        return GameView;
    }(PIXI.Container));
    views.GameView = GameView;
})(views || (views = {}));
var model;
(function (model) {
    var GameModel = /** @class */ (function (_super) {
        __extends(GameModel, _super);
        function GameModel() {
            var _this = _super.call(this) || this;
            _this.balance = 50000;
            return _this;
        }
        return GameModel;
    }(Pluck.Model));
    model.GameModel = GameModel;
})(model || (model = {}));
///<reference path="../types/rank.ts"/>
///<reference path="../types/suit.ts"/>
var views;
(function (views) {
    var CardsView = /** @class */ (function (_super) {
        __extends(CardsView, _super);
        function CardsView() {
            var _this = _super.call(this) || this;
            _this._speed = 1;
            _this._cards = [];
            _this.createNewCards();
            return _this;
        }
        CardsView.prototype.createNewCards = function () {
            for (var index = 0; index < CardsView.COUNT; index++) {
                var newCard = new views.Card();
                newCard.x = CardsView.X;
                newCard.x += index * (CardsView.CARD_WIDTH + CardsView.DISTANCE_BETWEEN);
                newCard.y = CardsView.Y;
                this._cards.push(newCard);
                this.addChild(newCard);
            }
        };
        CardsView.prototype.setNewRanksAndSuits = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var currentCard = _a[_i];
                do {
                    currentCard.setSuitAndRank(this.getRandomRank(), this.getRandomSuit());
                    console.log(currentCard.rank, currentCard.suit);
                } while (this.cardExists(currentCard));
            }
        };
        CardsView.prototype.cardExists = function (card) {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var currentCard = _a[_i];
                if (card.rank == currentCard.rank && card.suit == currentCard.suit && card != currentCard) {
                    console.log(card, this.cards);
                    return true;
                }
            }
            return false;
        };
        Object.defineProperty(CardsView.prototype, "cards", {
            get: function () {
                return this._cards;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsView.prototype, "revealSpeed", {
            set: function (val) {
                this._speed = val;
            },
            enumerable: true,
            configurable: true
        });
        CardsView.prototype.revealCards = function () {
            var _this = this;
            var _loop_1 = function (index) {
                if (!this_1._cards[index].isHeld) {
                    setTimeout(function () {
                        _this._cards[index].reveal();
                    }, 100 * index);
                    console.log(this_1._cards.length);
                }
            };
            var this_1 = this;
            for (var index = 0; index < this._cards.length; index++) {
                _loop_1(index);
            }
        };
        CardsView.prototype.hideCards = function () {
            for (var index = 0; index < this._cards.length; index++) {
                this._cards[index].hide();
            }
        };
        CardsView.prototype.holdCard = function (index) {
            this._cards[index].hold();
        };
        CardsView.prototype.releaseCard = function (index) {
            this._cards[index].release();
        };
        CardsView.prototype.releaseAllCards = function () {
            this._cards.forEach(function (card) {
                card.release();
            });
        };
        //TODO alternative
        CardsView.prototype.getRandomRank = function () {
            var num = Math.floor((Math.random() * 20) % 13) + 2;
            switch (num) {
                case 2: {
                    return "2";
                }
                case 3: {
                    return "3";
                }
                case 4: {
                    return "4";
                }
                case 5: {
                    return "5";
                }
                case 6: {
                    return "6";
                }
                case 7: {
                    return "7";
                }
                case 8: {
                    return "8";
                }
                case 9: {
                    return "9";
                }
                case 10: {
                    return "10";
                }
                case 11: {
                    return "J";
                }
                case 12: {
                    return "Q";
                }
                case 13: {
                    return "K";
                }
                case 14: {
                    return "A";
                }
            }
        };
        //TODO alternative
        CardsView.prototype.getRandomSuit = function () {
            var num = Math.floor(Math.random() * 10) % 4;
            switch (num) {
                case 0: {
                    return "C";
                }
                case 1: {
                    return "D";
                }
                case 2: {
                    return "H";
                }
                case 3: {
                    return "S";
                }
            }
        };
        CardsView.COUNT = 5;
        CardsView.X = 90;
        CardsView.Y = 235;
        CardsView.CARD_WIDTH = 170;
        CardsView.CARD_HEIGHT = 235;
        CardsView.DISTANCE_BETWEEN = 10;
        return CardsView;
    }(PIXI.Container));
    views.CardsView = CardsView;
})(views || (views = {}));
///<reference path="../views/CardsView.ts"/>
///<reference path="../Notifications.ts"/>
var controllers;
(function (controllers) {
    var CardsView = views.CardsView;
    var Notification = poker.Notifications;
    var CardsController = /** @class */ (function (_super) {
        __extends(CardsController, _super);
        function CardsController() {
            return _super.call(this, new CardsView()) || this;
            // this._view.revealCards();
            // for (const card of this.view.cards) {
            //     card.on("click", this.onCardClick, this);
            // }
            // const mModel = this.gameModel;
            // console.log(mModel);
        }
        CardsController.prototype.getInterests = function () {
            return [Notification.DEAL, Notification.DRAW, Notification.COLLECT, Notification.END];
        };
        CardsController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
                case Notification.DEAL: {
                    this.view.hideCards();
                    this.view.setNewRanksAndSuits();
                    this.view.revealCards();
                    break;
                }
                case Notification.END: {
                    break;
                }
            }
        };
        Object.defineProperty(CardsController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        CardsController.prototype.onCardClick = function (e) {
            //
            var card = e.target;
            if (this.gameModel.balance > 0) {
                card.hold();
            }
        };
        return CardsController;
    }(Pluck.ViewController));
    controllers.CardsController = CardsController;
})(controllers || (controllers = {}));
///<reference path="../types/listening.ts"/>
///<reference path="../types/action.ts"/>
var views;
(function (views) {
    var BetButtonsView = /** @class */ (function (_super) {
        __extends(BetButtonsView, _super);
        function BetButtonsView() {
            var _this = _super.call(this) || this;
            _this._actionLabelDraw = "Draw";
            _this._actionLabelDeal = "Deal";
            _this._actionLabelCollect = "Collect";
            _this._actionLabelMaxBet = "Max Bet";
            _this._isCollectingStopped = false;
            _this._currentAction = "deal";
            _this._buttons = [];
            _this._bets = [];
            _this.setBets();
            _this.init();
            _this.buttonsInteractive = true;
            _this.listening("on");
            return _this;
        }
        Object.defineProperty(BetButtonsView.prototype, "buttonsInteractive", {
            set: function (v) {
                for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                    var button = _a[_i];
                    button.interactive = v;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButtonsView.prototype, "buttons", {
            get: function () {
                return this._buttons;
            },
            enumerable: true,
            configurable: true
        });
        BetButtonsView.prototype.setBets = function () {
            this._bets[0] = 1;
            this._bets[1] = 2;
            this._bets[2] = 3;
            this._bets[3] = 5;
            this._bets[4] = 10;
        };
        BetButtonsView.prototype.init = function () {
            for (var i = 0; i < BetButtonsView.COUNT; i++) {
                this.createButton(i);
            }
        };
        BetButtonsView.prototype.createButton = function (index) {
            var button = new views.BetButton(this._bets[index], index, this._actionLabelDeal);
            if (index == BetButtonsView.COUNT - 1) {
                button.isMaxBet = true;
                button.actionLabelText = this._actionLabelMaxBet;
            }
            button.x = 270 + index * (BetButtonsView.DISTANCE_BETWEEN + BetButtonsView.BUTTON_WIDTH);
            button.y = 480;
            this._buttons.push(button);
            this.addChild(button);
        };
        BetButtonsView.prototype.listening = function (method) {
            for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                button[method]("buttonSelected", this.selectButton, this);
            }
        };
        BetButtonsView.prototype.selectButton = function (buttonIndex) {
            for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                if (this._buttons.indexOf(button) == buttonIndex) {
                    button.selectButton();
                }
                else {
                    if (button.isSelected) {
                        button.deselectButton();
                    }
                }
            }
            this.doAction();
        };
        BetButtonsView.prototype.hasBalance = function () {
            return true;
        };
        BetButtonsView.prototype.takeBalance = function () {
            //TODO
        };
        BetButtonsView.prototype.turnCards = function (heldCards) {
            //TODO
        };
        BetButtonsView.prototype.updateActionLabel = function (newLabel) {
            for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                if (!button.isMaxBet) {
                    button.actionLabelText = newLabel;
                }
            }
        };
        BetButtonsView.prototype.isWin = function () {
            var num = Math.floor(Math.random() * 10) % 2;
            var isWin = num == 0 ? true : false;
            console.log(isWin ? "win" : "lose");
            this._currentPrice = this.calculatePrice();
            return isWin;
        };
        BetButtonsView.prototype.calculatePrice = function () {
            //TODO
            return 200;
        };
        BetButtonsView.prototype.collect = function () {
            var _this = this;
            var animatedPrice = 0;
            var collecting = setInterval(function () {
                if (_this._isCollectingStopped) {
                    console.log(_this._currentPrice);
                    _this.resetVariables();
                    clearInterval(collecting);
                    _this.updateActionLabel(_this._actionLabelDeal);
                    //TODO this is not the right place
                    _this._currentAction = "deal";
                    _this.emit("end");
                }
                else if (animatedPrice == _this._currentPrice) {
                    _this.resetVariables();
                    clearInterval(collecting);
                    _this.updateActionLabel(_this._actionLabelDeal);
                    //TODO this is not the right place
                    _this._currentAction = "deal";
                    _this.emit("end");
                }
                else {
                    animatedPrice += 5;
                    console.log(animatedPrice);
                }
            }, 100);
        };
        BetButtonsView.prototype.resetVariables = function () {
            this._currentPrice = 0;
            this._isCollectingStopped = false;
        };
        BetButtonsView.prototype.doAction = function () {
            switch (this._currentAction) {
                case "deal": {
                    if (this.hasBalance()) {
                        console.log("emitting deal");
                        this.takeBalance();
                        this.updateActionLabel(this._actionLabelDraw);
                        this.emit(this._currentAction);
                        this._currentAction = "draw";
                        break;
                    }
                    else {
                        throw "Umm... you are poor";
                        break;
                    }
                }
                case "draw": {
                    this.turnCards();
                    if (this.isWin()) {
                        this.emit(this._currentAction);
                        this.updateActionLabel(this._actionLabelCollect);
                        this.collect();
                        this._currentAction = "collect";
                    }
                    else {
                        this.emit(this._currentAction);
                        this.updateActionLabel(this._actionLabelDeal);
                        this._currentAction = "deal";
                    }
                    break;
                }
                case "collect": {
                    this.emit(this._currentAction);
                    this.updateActionLabel(this._actionLabelDeal);
                    this._currentAction = "deal";
                    this.stopCollecting();
                    break;
                }
            }
        };
        BetButtonsView.prototype.stopCollecting = function () {
            this._isCollectingStopped = true;
        };
        BetButtonsView.COUNT = 5;
        BetButtonsView.BUTTON_WIDTH = 86;
        BetButtonsView.DISTANCE_BETWEEN = 10;
        return BetButtonsView;
    }(PIXI.Container));
    views.BetButtonsView = BetButtonsView;
})(views || (views = {}));
///<reference path="../views/BetButtonsView.ts"/>
///<reference path="../Notifications.ts"/>
var controllers;
(function (controllers) {
    var Notification = poker.Notifications;
    var BetButtonsView = views.BetButtonsView;
    var ButtonsController = /** @class */ (function (_super) {
        __extends(ButtonsController, _super);
        function ButtonsController() {
            var _this = _super.call(this, new BetButtonsView()) || this;
            _this._view.on("draw", _this.onButtonDraw, _this);
            _this._view.on("deal", _this.onButtonDeal, _this);
            _this._view.on("collect", _this.onButtonCollect, _this);
            _this._view.on("end", _this.onEnd, _this);
            return _this;
        }
        ButtonsController.prototype.onButtonDraw = function () {
            console.log("sending notification:", Notification.DRAW);
            this.sendNotification(Notification.DRAW);
        };
        ButtonsController.prototype.onButtonDeal = function () {
            console.log("sending notification:", Notification.DEAL);
            this.sendNotification(Notification.DEAL);
        };
        ButtonsController.prototype.onButtonCollect = function () {
            console.log("sending notification:", Notification.COLLECT);
            this.sendNotification(Notification.COLLECT);
        };
        ButtonsController.prototype.onEnd = function () {
            console.log("ends");
            this.sendNotification(Notification.END);
        };
        return ButtonsController;
    }(Pluck.ViewController));
    controllers.ButtonsController = ButtonsController;
})(controllers || (controllers = {}));
///<reference path="../views/GameView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="./CardsController.ts"/>
///<reference path="./ButtonsController.ts"/>
var controllers;
(function (controllers) {
    var GameView = views.GameView;
    var Notifications = poker.Notifications;
    var GameModel = model.GameModel;
    var CardsController = controllers.CardsController;
    var ButtonsController = controllers.ButtonsController;
    var GameController = /** @class */ (function (_super) {
        __extends(GameController, _super);
        function GameController() {
            var _this = _super.call(this, new GameView(), new GameModel()) || this;
            _this.init();
            return _this;
        }
        GameController.prototype.init = function () {
            this._app = new PIXI.Application({
                width: 1280,
                height: 720,
            });
            this._app.stage.addChild(this._view);
            document.getElementById("display-port").appendChild(this._app.view);
        };
        GameController.prototype.getInterests = function () {
            return [Notifications.RESOURCES_LOADED];
        };
        GameController.prototype.handleNotification = function (note) {
            switch (note.name
            // case Notifications.RESOURCES_LOADED:
            //     this.addControllers();
            //     break;
            ) {
            }
        };
        GameController.prototype.addControllers = function () {
            this._cardsController = new CardsController();
            this.addChildViewController(this._cardsController);
            this._buttonsController = new ButtonsController();
            this.addChildViewController(this._buttonsController);
        };
        GameController.WIDTH = 1280;
        GameController.HEIGHT = 720;
        return GameController;
    }(Pluck.ViewController));
    controllers.GameController = GameController;
})(controllers || (controllers = {}));
///<reference path="../Notifications.ts"/>
var model;
(function (model) {
    var Notifications = poker.Notifications;
    var Resources = /** @class */ (function (_super) {
        __extends(Resources, _super);
        function Resources() {
            return _super.call(this) || this;
        }
        Resources.prototype.load = function () {
            PIXI.loader
                .add("background", "./assets/background.png")
                .add("sound", "./assets/sound.png")
                .add("cleanCard", "./assets/mainCards/card_clean.png")
                .add("cardBackBlack", "./assets/mainCards/cardBackBlack.png")
                .add("cardBackRed", "./assets/mainCards/cardBackRed.png")
                .add("clubs", "./assets/mainCards/clubs.png")
                .add("diamonds", "./assets/mainCards/diamonds.png")
                .add("hearts", "./assets/mainCards/hearts.png")
                .add("spades", "./assets/mainCards/spades.png")
                .add("ace", "./assets/mainCards/aceImage.png")
                .add("king", "./assets/mainCards/kingImage.png")
                .add("queen", "./assets/mainCards/queenImage.png")
                .add("jack", "./assets/mainCards/jackImage.png")
                .add("heldLabel", "./assets/mainCards/held.png")
                .add("winLabel", "./assets/mainCards/win_en.png")
                .add("gambleRed", "./assets/gamble/gambleRed.png")
                .add("gambleWin", "./assets/gamble/gambleWin.png")
                .add("cardBlink", "./assets/commonSounds/cardBlink.mp3")
                .add("cardSwap", "./assets/commonSounds/cardSwap.mp3")
                .add("collectButton", "./assets/commonSounds/collectButton.mp3")
                .add("creditAnimation", "./assets/commonSounds/creditAnimation.mp3")
                .add("gambleCardClick", "./assets/commonSounds/gambleCardClick.mp3")
                .add("gambleOpen", "./assets/commonSounds/gambleOpen.mp3")
                .add("gambleWon", "./assets/commonSounds/gambleWon.mp3")
                .add("holdCard", "./assets/commonSounds/holdCard.mp3")
                .add("mainButton", "./assets/commonSounds/mainButton.mp3")
                .add("takeWin", "./assets/commonSounds/takeWin.mp3")
                .add("volume", "./assets/commonSounds/volume.mp3");
            PIXI.loader.on("complete", this.onLoad.bind(this));
            PIXI.loader.load();
        };
        Resources.prototype.onLoad = function () {
            this.sendNotification(Notifications.RESOURCES_LOADED);
        };
        return Resources;
    }(Pluck.Model));
    model.Resources = Resources;
})(model || (model = {}));
///<reference path="./controllers/GameController.ts"/>
///<reference path="models/Resources.ts"/>
var poker;
(function (poker) {
    var GameController = controllers.GameController;
    var Main = /** @class */ (function () {
        function Main() {
            //  this._res = new Resources();
            //  this._res.load();
            var a = 5;
            var root = new GameController();
            Pluck.ViewController.setRoot(root);
            root.addControllers();
        }
        return Main;
    }());
    poker.Main = Main;
})(poker || (poker = {}));
var views;
(function (views) {
    var BetButton = /** @class */ (function (_super) {
        __extends(BetButton, _super);
        function BetButton(bet, index, actionLabel) {
            var _this = _super.call(this) || this;
            _this._width = 87;
            _this._inactiveTexture = PIXI.Texture.fromImage("../../bin/assets/button/betButtonInactive.png");
            _this._activeTexture = PIXI.Texture.fromImage("../../bin/assets/button/betButtonActive.png");
            _this._actionLabelFontSize = 15;
            _this._actionLabelY = 52;
            _this._betLabelFontSize = 12;
            _this._betLabelY = -1;
            _this._betLabelText = "BET";
            _this._betPriceLabelY = 13;
            _this._betPriceLabelSize = 35;
            _this.texture = _this._inactiveTexture;
            _this.buttonMode = true;
            _this.on("pointerdown", _this.onPointerDown);
            _this.on("pointerup", _this.onPointerUp);
            _this.on("pointerupoutside", _this.onPointerUpOutside);
            _this._index = index;
            _this._betPrice = bet;
            _this._isDown = false;
            _this._isMaxBet = false;
            _this._actionLabelText = actionLabel;
            _this.setTexts();
            return _this;
        }
        Object.defineProperty(BetButton.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "actionLabelText", {
            set: function (text) {
                this._actionLabel.text = text;
                this.resetCoordinates();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "isMaxBet", {
            get: function () {
                return this._isMaxBet;
            },
            set: function (isMaxBet) {
                this._isMaxBet = isMaxBet;
            },
            enumerable: true,
            configurable: true
        });
        BetButton.prototype.selectButton = function () {
            this._isSelected = true;
            this.texture = this._activeTexture;
        };
        BetButton.prototype.deselectButton = function () {
            this._isSelected = false;
            this.texture = this._inactiveTexture;
        };
        BetButton.prototype.resetCoordinates = function () {
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
        };
        BetButton.prototype.onPointerUp = function (e) {
            this.goUp();
            this.emit("buttonSelected", this._index);
        };
        BetButton.prototype.onPointerUpOutside = function (e) {
            if (this._isDown) {
                this.goUp();
            }
        };
        BetButton.prototype.onPointerDown = function (e) {
            this.goDown();
        };
        BetButton.prototype.goDown = function () {
            this.y += 5;
            this._isDown = true;
        };
        BetButton.prototype.goUp = function () {
            this.y -= 5;
            this._isDown = false;
        };
        BetButton.prototype.setTexts = function () {
            this._actionLabel = new PIXI.Text(this._actionLabelText, {
                fontSize: this._actionLabelFontSize,
            });
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
            this.addChild(this._actionLabel);
            this._betLabel = new PIXI.Text(this._betLabelText, {
                fontSize: this._betLabelFontSize,
                fontWeight: "bolder",
            });
            this._betLabel.x = (this._width - this._betLabel.width) / 2;
            this._betLabel.y = this._betLabelY;
            this.addChild(this._betLabel);
            this._betPriceLabel = new PIXI.Text(this._betPrice.toString(), {
                fontSize: this._betPriceLabelSize,
                fill: "white",
                align: "center",
            });
            this._betPriceLabel.x = (this._width - this._betPriceLabel.width) / 2;
            this._betPriceLabel.y = this._betPriceLabelY;
            this.addChild(this._betPriceLabel);
        };
        return BetButton;
    }(PIXI.Sprite));
    views.BetButton = BetButton;
})(views || (views = {}));
///<reference path="../types/rank.ts"/>
///<reference path="../types/suit.ts"/>
var views;
(function (views) {
    var Card = /** @class */ (function (_super) {
        __extends(Card, _super);
        function Card() {
            var _this = _super.call(this) || this;
            _this.init();
            _this.texture = _this._backTexture;
            return _this;
        }
        Card.prototype.setSuitAndRank = function (rank, suit) {
            this._rank = rank;
            this._suit = suit;
            this.addSuitAndRank();
        };
        Object.defineProperty(Card.prototype, "rank", {
            get: function () {
                return this._rank;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Card.prototype, "suit", {
            get: function () {
                return this._suit;
            },
            enumerable: true,
            configurable: true
        });
        Card.prototype.init = function () {
            this._backTexture = PIXI.Texture.from("./assets/mainCards/cardBackBlack.png");
            this._faceTexture = PIXI.Texture.from("./assets/mainCards/card_clean.png");
            this._heldLabel = PIXI.Sprite.fromImage("./assets/mainCards/held.png");
            this._winLabel = PIXI.Sprite.fromImage("./assets/mainCards/win_en.png");
            this._isHeld = false;
        };
        Card.prototype.addSuitAndRank = function () {
            this._suitLabel = this.getSuitSprite(this._suit);
            if (this._suit == "D" || this._suit == "H") {
                this._rankLabel = new PIXI.Text(this._rank, {
                    fontSize: 55,
                    fontWeight: "bolder",
                    fill: 0xff0000,
                });
            }
            else {
                this._rankLabel = new PIXI.Text(this._rank, {
                    fontSize: 55,
                    fontWeight: "bolder",
                    fill: 0x000000,
                });
            }
            this._rankLabel.x = 30 - 8 * this._rankLabel.text.length;
            this._rankLabel.y = 3;
            this.addSpecificSprite();
        };
        Card.prototype.addSpecificSprite = function () {
            if (!Number(this._rank)) {
                switch (this._rank) {
                    case "J": {
                        this._specificSprite = PIXI.Sprite.fromImage("./assets/mainCards/jackImage.png");
                        break;
                    }
                    case "Q": {
                        this._specificSprite = PIXI.Sprite.fromImage("./assets/mainCards/queenImage.png");
                        break;
                    }
                    case "K": {
                        this._specificSprite = PIXI.Sprite.fromImage("./assets/mainCards/kingImage.png");
                        break;
                    }
                    case "A": {
                        this._specificSprite = PIXI.Sprite.fromImage("./assets/mainCards/aceImage.png");
                        break;
                    }
                }
                this._specificSprite.x = 70;
                this._specificSprite.y = 10;
            }
        };
        Object.defineProperty(Card.prototype, "isHeld", {
            get: function () {
                return this._isHeld;
            },
            enumerable: true,
            configurable: true
        });
        Card.prototype.reveal = function () {
            if (!this._isHeld) {
                this.texture = this._faceTexture;
                this.addChild(this._suitLabel);
                this.addChild(this._rankLabel);
                if (this._specificSprite) {
                    this.addChild(this._specificSprite);
                }
            }
        };
        Card.prototype.hide = function () {
            this._specificSprite = null;
            this.removeChildren();
            this.texture = this._backTexture;
        };
        Card.prototype.hold = function () {
            this._isHeld = true;
            this.addChild(this._heldLabel);
        };
        Card.prototype.win = function () {
            this.addChild(this._winLabel);
        };
        Card.prototype.release = function () {
            this._isHeld = false;
            this.removeChild(this._heldLabel);
        };
        Card.prototype.getSuitSprite = function (suit) {
            switch (suit) {
                case "C": {
                    return PIXI.Sprite.fromImage("../../bin/assets/mainCards/clubs.png");
                }
                case "D": {
                    return PIXI.Sprite.fromImage("../../bin/assets/mainCards/diamonds.png");
                }
                case "H": {
                    return PIXI.Sprite.fromImage("../../bin/assets/mainCards/hearts.png");
                }
                case "S": {
                    return PIXI.Sprite.fromImage("../../bin/assets/mainCards/spades.png");
                }
            }
        };
        return Card;
    }(PIXI.Sprite));
    views.Card = Card;
})(views || (views = {}));
//# sourceMappingURL=Game.min.js.map