var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var poker;
(function (poker) {
    var Notifications = /** @class */ (function () {
        function Notifications() {
        }
        Notifications.COLLECTING = "collecting";
        Notifications.RESOURCES_LOADED = "resourcesLoaded";
        Notifications.BUTTON_CLICK_DRAW = "draw button clicked";
        Notifications.BUTTON_CLICK_DEAL = "deal button clicked";
        Notifications.BUTTON_CLICK_COLLECT = "collect button clicked";
        Notifications.CARDS_REVEAL_STARTED = "cards reveal is started";
        Notifications.CARDS_REVEAL_ENDED = "cards reveal just ended";
        Notifications.PLAYER_WON = "player won";
        Notifications.PLAYER_LOST = "player lost";
        Notifications.DEAL_SUCCESSFUL = "dealSuccess";
        Notifications.DRAW_SUCCESSFUL = "drawSuccess";
        Notifications.COLLECTING_SUCCESSFUL = "collectingSuccess";
        Notifications.CURRENCY_CHANGED = "currencyChanged";
        Notifications.BALANCE_INIT = "balance was initialized";
        return Notifications;
    }());
    poker.Notifications = Notifications;
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var views;
(function (views) {
    var GameView = /** @class */ (function (_super) {
        __extends(GameView, _super);
        function GameView() {
            var _this = _super.call(this) || this;
            _this.addChild(PIXI.Sprite.from("background"));
            return _this;
        }
        return GameView;
    }(PIXI.Container));
    views.GameView = GameView;
})(views || (views = {}));
///<reference path="../Main.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../types/state.ts"/>
///<reference path="../types/combination.ts"/>
var model;
(function (model) {
    var Notification = poker.Notifications;
    var GameModel = /** @class */ (function (_super) {
        __extends(GameModel, _super);
        function GameModel() {
            return _super.call(this) || this;
        }
        Object.defineProperty(GameModel.prototype, "lastWinCardsIndexes", {
            get: function () {
                return this._lastWinCardsIndexes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "lastWinCombination", {
            get: function () {
                return this._lastWinCombination;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "lastWin", {
            get: function () {
                return this._lastWin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "facade", {
            get: function () {
                return this._facade;
            },
            set: function (v) {
                this._facade = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "balance", {
            get: function () {
                return this._balance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "cards", {
            get: function () {
                return this._cards;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        GameModel.prototype.changeCurrency = function () {
            this._isShowingCredits = !this._isShowingCredits;
            this.sendNotification(Notification.CURRENCY_CHANGED);
        };
        Object.defineProperty(GameModel.prototype, "data", {
            set: function (val) {
                //TODO u need to make a way to receive information about last win
                this._balance = val.balance;
                this._cards = val.cards;
                this._state = val.state;
                this._lastWinCombination = val.winCombination;
                if (val.winCardsIndexes != null) {
                    this._lastWinCardsIndexes = val.winCardsIndexes;
                }
                if (val.winAmount != null) {
                    this._lastWin = val.winAmount;
                }
                switch (val.state) {
                    case "Init": {
                        this.sendNotification(Notification.BALANCE_INIT);
                        break;
                    }
                    case "Deal": {
                        this.sendNotification(Notification.DEAL_SUCCESSFUL);
                        break;
                    }
                    case "Draw": {
                        this.sendNotification(Notification.DRAW_SUCCESSFUL);
                        break;
                    }
                    case "Collect": {
                        this.sendNotification(Notification.COLLECTING);
                        break;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        return GameModel;
    }(Pluck.Model));
    model.GameModel = GameModel;
})(model || (model = {}));
var poker;
(function (poker) {
    var Message = /** @class */ (function () {
        function Message() {
        }
        Message.cardsStartReveiling = "Cards start reveiling";
        Message.cardsEndReveiling = "Cards ends reveiling";
        Message.optionsButtonClicked = "options button clicked";
        return Message;
    }());
    poker.Message = Message;
})(poker || (poker = {}));
///<reference path="../types/rank.ts"/>
///<reference path="../types/suit.ts"/>
///<reference path="../Message.ts"/>
var views;
(function (views) {
    var Message = poker.Message;
    var CardsView = /** @class */ (function (_super) {
        __extends(CardsView, _super);
        function CardsView() {
            var _this = _super.call(this) || this;
            _this._x = 90;
            _this._y = 335;
            _this._speed = 1;
            _this._cards = [];
            _this.createNewCards();
            return _this;
        }
        Object.defineProperty(CardsView.prototype, "cards", {
            get: function () {
                return this._cards;
            },
            enumerable: true,
            configurable: true
        });
        CardsView.prototype.getUnholdedCardIndexes = function () {
            var unholdedCardIndexes = [];
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                if (!card.isHeld) {
                    unholdedCardIndexes.push(this._cards.indexOf(card));
                }
            }
            return unholdedCardIndexes;
        };
        Object.defineProperty(CardsView.prototype, "revealSpeed", {
            set: function (val) {
                this._speed = val;
            },
            enumerable: true,
            configurable: true
        });
        CardsView.prototype.setCardsRanksAndSuits = function (v) {
            console.log(v);
            for (var index = 0; index < v.length; index++) {
                this._cards[index].setSuitAndRank(this.getRank(v[index]), this.getSuit(v[index]));
            }
        };
        //TODO Use TimelineMax
        CardsView.prototype.revealCards = function () {
            var _this = this;
            this.emit(Message.cardsStartReveiling);
            var _loop_1 = function (card) {
                if (!card.isHeld) {
                    setTimeout(function () {
                        card.reveal();
                    }, 100 * this_1.cards.indexOf(card));
                }
            };
            var this_1 = this;
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                _loop_1(card);
            }
            setTimeout(function () {
                _this.emit(Message.cardsEndReveiling);
            }, 100 * this.cards.length);
        };
        CardsView.prototype.hideCards = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                if (!card.isHeld) {
                    card.hide();
                }
            }
        };
        CardsView.prototype.startInteractivity = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                card.interactive = true;
            }
        };
        CardsView.prototype.stopInteractivity = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                card.interactive = false;
            }
        };
        CardsView.prototype.holdCard = function (index) {
            this._cards[index].hold();
        };
        CardsView.prototype.releaseCard = function (index) {
            this._cards[index].release();
        };
        CardsView.prototype.releaseAllCards = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                card.release();
            }
        };
        CardsView.prototype.createNewCards = function () {
            for (var index = 0; index < CardsView.COUNT; index++) {
                var newCard = new views.Card();
                newCard.x = this._x;
                newCard.x += index * (newCard.width + CardsView.DISTANCE_BETWEEN);
                newCard.y = this._y;
                newCard.buttonMode = true;
                this._cards.push(newCard);
                this.addChild(newCard);
            }
        };
        CardsView.prototype.setWinningCards = function (indexes) {
            for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {
                var index = indexes_1[_i];
                this._cards[index].win();
            }
        };
        CardsView.prototype.getRank = function (card) {
            var rank = card % 13;
            switch (rank) {
                case 0: {
                    return "A";
                }
                case 1: {
                    return "2";
                }
                case 2: {
                    return "3";
                }
                case 3: {
                    return "4";
                }
                case 4: {
                    return "5";
                }
                case 5: {
                    return "6";
                }
                case 6: {
                    return "7";
                }
                case 7: {
                    return "8";
                }
                case 8: {
                    return "9";
                }
                case 9: {
                    return "10";
                }
                case 10: {
                    return "J";
                }
                case 11: {
                    return "Q";
                }
                case 12: {
                    return "K";
                }
            }
        };
        CardsView.prototype.getSuit = function (card) {
            var suit = Math.floor(card / 13);
            switch (suit) {
                case 0: {
                    return "C";
                }
                case 1: {
                    return "D";
                }
                case 2: {
                    return "H";
                }
                case 3: {
                    return "S";
                }
            }
        };
        CardsView.COUNT = 5;
        CardsView.DISTANCE_BETWEEN = 10;
        return CardsView;
    }(PIXI.Container));
    views.CardsView = CardsView;
})(views || (views = {}));
///<reference path="../views/CardsView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../Message.ts"/>
var controllers;
(function (controllers) {
    var CardsView = views.CardsView;
    var Notification = poker.Notifications;
    var Message = poker.Message;
    var CardsController = /** @class */ (function (_super) {
        __extends(CardsController, _super);
        function CardsController() {
            var _this = _super.call(this, new CardsView()) || this;
            _this._view.on(Message.cardsStartReveiling, _this.notifyCardsRevealingStarted, _this);
            _this._view.on(Message.cardsEndReveiling, _this.notifyCardsRevealingEnded, _this);
            _this._view.on(Message.cardsEndReveiling, _this.setWinningCards, _this);
            return _this;
        }
        CardsController.prototype.getInterests = function () {
            return [
                Notification.BUTTON_CLICK_DRAW,
                Notification.BUTTON_CLICK_COLLECT,
                Notification.DEAL_SUCCESSFUL,
                Notification.DRAW_SUCCESSFUL
            ];
        };
        CardsController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
                case Notification.DEAL_SUCCESSFUL: {
                    this.view.hideCards();
                    this.view.setCardsRanksAndSuits(this.gameModel.cards);
                    this.view.revealCards();
                    this.view.startInteractivity();
                    break;
                }
                case Notification.DRAW_SUCCESSFUL: {
                    this.view.hideCards();
                    this.view.setCardsRanksAndSuits(this.gameModel.cards);
                    this.view.revealCards();
                    this.view.stopInteractivity();
                    this.view.releaseAllCards();
                    this.gameModel.facade.requestCollect();
                    break;
                }
                case Notification.BUTTON_CLICK_DRAW: {
                    this.view.hideCards();
                    this.gameModel.facade.requestDraw(this.view.getUnholdedCardIndexes());
                }
            }
        };
        Object.defineProperty(CardsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        CardsController.prototype.notifyCardsRevealingStarted = function () {
            this.sendNotification(Notification.CARDS_REVEAL_STARTED);
        };
        CardsController.prototype.setWinningCards = function () {
            if (this.gameModel.state == "Collect") {
                this.view.setWinningCards(this.gameModel.lastWinCardsIndexes);
            }
        };
        CardsController.prototype.notifyCardsRevealingEnded = function () {
            this.sendNotification(Notification.CARDS_REVEAL_ENDED);
        };
        CardsController.prototype.onCardClick = function (e) {
            //
            var card = e.target;
            this.gameModel.facade.requestDeal(200);
            if (this.gameModel.balance > 0) {
                card.hold();
            }
        };
        return CardsController;
    }(Pluck.ViewController));
    controllers.CardsController = CardsController;
})(controllers || (controllers = {}));
///<reference path="../types/listening.ts"/>
///<reference path="../types/action.ts"/>
var views;
(function (views) {
    var BetButtonsView = /** @class */ (function (_super) {
        __extends(BetButtonsView, _super);
        function BetButtonsView(bets) {
            var _this = _super.call(this) || this;
            _this._actionLabelDeal = "Deal";
            _this._actionLabelMaxBet = "Max Bet";
            _this._buttonsY = 610;
            _this._buttons = [];
            _this._bets = bets;
            _this.init();
            _this.buttonsInteractive = true;
            return _this;
        }
        Object.defineProperty(BetButtonsView.prototype, "buttons", {
            get: function () {
                return this._buttons;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButtonsView.prototype, "buttonsInteractive", {
            set: function (v) {
                for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                    var button = _a[_i];
                    button.interactive = v;
                }
            },
            enumerable: true,
            configurable: true
        });
        BetButtonsView.prototype.init = function () {
            for (var i = 0; i < BetButtonsView.COUNT; i++) {
                this.createButton(i);
            }
        };
        BetButtonsView.prototype.createButton = function (index) {
            var isMaxBet = index == BetButtonsView.COUNT - 1;
            var button = new views.BetButton(this._bets[index], index, this._actionLabelDeal, isMaxBet);
            if (button.isMaxBet) {
                button.actionLabelText = this._actionLabelMaxBet;
            }
            button.x = 270 + index * (BetButtonsView.DISTANCE_BETWEEN + BetButtonsView.BUTTON_WIDTH);
            button.y = this._buttonsY;
            this._buttons.push(button);
            this.addChild(button);
        };
        BetButtonsView.COUNT = 5;
        BetButtonsView.BUTTON_WIDTH = 86;
        BetButtonsView.DISTANCE_BETWEEN = 10;
        return BetButtonsView;
    }(PIXI.Container));
    views.BetButtonsView = BetButtonsView;
})(views || (views = {}));
var views;
(function (views) {
    var BetButton = /** @class */ (function (_super) {
        __extends(BetButton, _super);
        function BetButton(betValue, index, actionLabel, isMaxBet) {
            var _this = _super.call(this) || this;
            _this._width = 87;
            _this._inactiveTexture = PIXI.Texture.from("buttonInactive");
            _this._activeTexture = PIXI.Texture.from("buttonActive");
            _this._actionLabelFontSize = 15;
            _this._actionLabelY = 52;
            _this._betLabelFontSize = 12;
            _this._betLabelY = -1;
            _this._betLabelText = "BET";
            _this._betValueLabelY = 13;
            _this._betValueLabelSize = 35;
            _this.texture = _this._inactiveTexture;
            _this.buttonMode = true;
            _this.on("pointerdown", _this.onPointerDown);
            _this.on("pointerup", _this.onPointerUp);
            _this.on("pointerupoutside", _this.onPointerUpOutside);
            _this._index = index;
            _this._betValue = betValue;
            _this._isDown = false;
            _this._isMaxBet = isMaxBet;
            _this._actionLabelText = actionLabel;
            _this.setTexts();
            return _this;
        }
        Object.defineProperty(BetButton.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "betValue", {
            get: function () {
                return this._betValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "actionLabelText", {
            set: function (text) {
                this._actionLabel.text = text;
                this.resetCoordinates();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "isMaxBet", {
            get: function () {
                return this._isMaxBet;
            },
            enumerable: true,
            configurable: true
        });
        BetButton.prototype.selectButton = function () {
            this._isSelected = true;
            this.texture = this._activeTexture;
        };
        BetButton.prototype.deselectButton = function () {
            this._isSelected = false;
            this.texture = this._inactiveTexture;
        };
        BetButton.prototype.resetCoordinates = function () {
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
        };
        BetButton.prototype.onPointerUp = function (e) {
            if (this._isDown) {
                this.goUp();
                this.emit("buttonSelected", this._index);
            }
        };
        BetButton.prototype.onPointerUpOutside = function (e) {
            if (this._isDown) {
                this.goUp();
            }
        };
        BetButton.prototype.onPointerDown = function (e) {
            this.goDown();
        };
        BetButton.prototype.goDown = function () {
            this.y += 5;
            this._isDown = true;
        };
        BetButton.prototype.goUp = function () {
            this.y -= 5;
            this._isDown = false;
        };
        BetButton.prototype.setTexts = function () {
            this._actionLabel = new PIXI.Text(this._actionLabelText, {
                fontSize: this._actionLabelFontSize,
            });
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
            this.addChild(this._actionLabel);
            this._betLabel = new PIXI.Text(this._betLabelText, {
                fontSize: this._betLabelFontSize,
                fontWeight: "bolder",
            });
            this._betLabel.x = (this._width - this._betLabel.width) / 2;
            this._betLabel.y = this._betLabelY;
            this.addChild(this._betLabel);
            this._betValueLabel = new PIXI.Text(this._betValue.toString(), {
                fontSize: this._betValueLabelSize,
                fill: "white",
                align: "center",
            });
            this._betValueLabel.x = (this._width - this._betValueLabel.width) / 2;
            this._betValueLabel.y = this._betValueLabelY;
            this.addChild(this._betValueLabel);
        };
        return BetButton;
    }(PIXI.Sprite));
    views.BetButton = BetButton;
})(views || (views = {}));
///<reference path="../views/BetButtonsView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../views/BetButton.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="../types/action.ts"/>
///<reference path="../types/listening.ts"/>
///<reference path="../types/state.ts"/>
var controllers;
(function (controllers) {
    var Notification = poker.Notifications;
    var BetButtonsView = views.BetButtonsView;
    var ButtonsController = /** @class */ (function (_super) {
        __extends(ButtonsController, _super);
        function ButtonsController() {
            var _this = _super.call(this, new BetButtonsView([1, 2, 3, 5, 10])) || this;
            _this._currentAction = "deal clicked";
            _this.listening("on");
            return _this;
        }
        Object.defineProperty(ButtonsController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        ButtonsController.prototype.getInterests = function () {
            return [Notification.DEAL_SUCCESSFUL, Notification.COLLECTING, Notification.COLLECTING_SUCCESSFUL];
        };
        ButtonsController.prototype.handleNotification = function (notification) {
            switch (notification.name) {
                case Notification.DEAL_SUCCESSFUL: {
                    this._currentAction = "draw clicked";
                    this.updateActionLabel("Draw");
                    // this._view.
                    break;
                }
                case Notification.COLLECTING: {
                    this._currentAction = "collect clicked";
                    this.updateActionLabel("Collect");
                    break;
                }
                case Notification.COLLECTING_SUCCESSFUL: {
                    this._currentAction = "deal clicked";
                    this.updateActionLabel("Deal");
                    break;
                }
            }
        };
        ButtonsController.prototype.onButtonClicked = function (e) {
            var selectedButton = e.target;
            switch (this._currentAction) {
                case "deal clicked": {
                    this.gameModel.facade.requestDeal(selectedButton.betValue);
                    this.sendNotification(Notification.BUTTON_CLICK_DEAL);
                    break;
                }
                case "draw clicked": {
                    this.sendNotification(Notification.BUTTON_CLICK_DRAW);
                    break;
                }
                case "collect clicked": {
                    this.sendNotification(Notification.BUTTON_CLICK_COLLECT);
                    break;
                }
            }
        };
        ButtonsController.prototype.listening = function (method) {
            for (var _i = 0, _a = this._view.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                button[method]("buttonSelected", this.selectButton, this);
                button[method]("click", this.onButtonClicked, this);
            }
        };
        ButtonsController.prototype.selectButton = function (buttonIndex) {
            for (var _i = 0, _a = this._view.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                if (this._view.buttons.indexOf(button) == buttonIndex) {
                    button.selectButton();
                }
                else {
                    if (button.isSelected) {
                        button.deselectButton();
                    }
                }
            }
        };
        ButtonsController.prototype.updateActionLabel = function (newLabel) {
            for (var _i = 0, _a = this._view.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                if (!button.isMaxBet) {
                    button.actionLabelText = newLabel;
                }
            }
        };
        return ButtonsController;
    }(Pluck.ViewController));
    controllers.ButtonsController = ButtonsController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var BalanceView = /** @class */ (function (_super) {
        __extends(BalanceView, _super);
        function BalanceView() {
            var _this = _super.call(this) || this;
            _this._x = 100;
            _this._y = 575;
            _this._width = 160;
            _this._height = 55;
            _this._radius = 16;
            _this._delay = 0.3;
            _this._tl = new TimelineMax();
            _this.drawFigure();
            _this._balanceLabel = new PIXI.Text("BALANCE", {
                fill: 0x015d8a,
                fontSize: 13,
                fontWeight: "bolder",
            });
            _this.insertTexts();
            return _this;
        }
        BalanceView.prototype.buttonCollectClicked = function () {
            this.stopCollecting();
        };
        BalanceView.prototype.initializeBalance = function (balance) {
            this._balanceAmount = balance;
            this._balanceAmountText = new PIXI.Text(this._balanceAmount.toString(), {
                fill: 0xffffff,
                fontSize: 30,
                fontWeight: "bolder",
            });
            this._balanceAmountText.x = this._x + (this._width - this._balanceAmountText.width) / 2;
            this._balanceAmountText.y = this._y + (this._height - this._balanceAmountText.height) / 2;
            this.addChild(this._balanceAmountText);
        };
        BalanceView.prototype.insertTexts = function () {
            this._balanceLabel.x = this._x + (this._width - this._balanceLabel.width) / 2;
            this._balanceLabel.y = this._y - 5;
            this.addChild(this._balanceLabel);
        };
        BalanceView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        BalanceView.prototype.changeBalance = function (balance) {
            this._balanceAmount = balance;
            this._balanceAmountText.text = this._balanceAmount.toString();
        };
        BalanceView.prototype.increaseBalance = function (balance) {
            if (this._balanceAmount < balance) {
                while (this._balanceAmount < balance) {
                    this._tl.add(TweenMax.delayedCall(this._delay, this.changeBalance, [++this._balanceAmount], this));
                }
                this._tl.call(this.stopCollecting, null, this);
            }
            else {
                this.emit("Collecting ended");
            }
        };
        BalanceView.prototype.stopCollecting = function () {
            var _this = this;
            this._tl.pause();
            this._tl = new TimelineMax();
            this._tl.call(function () {
                _this.emit("Collecting ended");
            });
        };
        return BalanceView;
    }(PIXI.Graphics));
    views.BalanceView = BalanceView;
})(views || (views = {}));
///<reference path="../views/BalanceView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
var controllers;
(function (controllers) {
    var BalanceView = views.BalanceView;
    var Notification = poker.Notifications;
    var BalanceController = /** @class */ (function (_super) {
        __extends(BalanceController, _super);
        function BalanceController() {
            //TODO balance must be received from server
            return _super.call(this, new BalanceView()) || this;
        }
        BalanceController.prototype.getInterests = function () {
            return [Notification.DEAL_SUCCESSFUL, Notification.BALANCE_INIT];
        };
        Object.defineProperty(BalanceController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        BalanceController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
                case Notification.BALANCE_INIT: {
                    this._view.initializeBalance(this.gameModel.balance);
                    break;
                }
                case Notification.DEAL_SUCCESSFUL: {
                    this._view.changeBalance(this.gameModel.balance);
                    break;
                }
            }
        };
        return BalanceController;
    }(Pluck.ViewController));
    controllers.BalanceController = BalanceController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var PriceBoardView = /** @class */ (function (_super) {
        __extends(PriceBoardView, _super);
        function PriceBoardView() {
            var _this = _super.call(this) || this;
            _this._x = 90;
            _this._y = 20;
            _this._width = 890;
            _this._height = 300;
            _this._innerX = _this._x + 10;
            _this._innerY = _this._y + 10;
            _this._innerWidth = _this._width - 20;
            _this._innerHeight = _this._height - 20;
            _this._radius = 16;
            _this.drawFigures();
            return _this;
        }
        PriceBoardView.prototype.drawFigures = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRect(this._x, this._y, this._width, this._height);
            this.endFill();
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._innerX, this._innerY, this._innerWidth, this._innerHeight, this._radius);
            this.endFill();
            var justText = new PIXI.Text("This will be the score board!", {
                fill: 0x015d8a,
                fontSize: 30,
                fontWeight: "bolder",
            });
            justText.x = this._innerX + (this._innerWidth - justText.width) / 2;
            justText.y = this._innerY + (this._innerHeight - justText.height) / 2;
            this.addChild(justText);
        };
        return PriceBoardView;
    }(PIXI.Graphics));
    views.PriceBoardView = PriceBoardView;
})(views || (views = {}));
///<reference path="../views/PriceBoardView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
var controllers;
(function (controllers) {
    var PriceBoardView = views.PriceBoardView;
    var PriceBoardController = /** @class */ (function (_super) {
        __extends(PriceBoardController, _super);
        function PriceBoardController() {
            return _super.call(this, new PriceBoardView()) || this;
        }
        PriceBoardController.prototype.getInterests = function () {
            return [];
        };
        Object.defineProperty(PriceBoardController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        PriceBoardController.prototype.handleNotification = function (notification) {
        };
        return PriceBoardController;
    }(Pluck.ViewController));
    controllers.PriceBoardController = PriceBoardController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var WinView = /** @class */ (function (_super) {
        __extends(WinView, _super);
        function WinView() {
            var _this = _super.call(this) || this;
            _this._x = 750;
            _this._y = 575;
            _this._width = 220;
            _this._height = 100;
            _this._radius = 16;
            _this._delay = 0.05;
            _this._tl = new TimelineMax();
            _this.drawFigure();
            _this._lastWin = new PIXI.Text("", {
                fill: 0xffffff,
                fontSize: 40,
                fontWeight: "bolder"
            });
            _this._lastWin.x = _this._x + (_this._width - _this._lastWin.width) / 2;
            _this._lastWin.y = _this._y + (_this._height - _this._lastWin.height) / 4;
            _this.addChild(_this._lastWin);
            return _this;
        }
        WinView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        WinView.prototype.changeLastWin = function (lastWin) {
            if (lastWin != null && lastWin != 0) {
                this._lastWin.text = lastWin.toString();
                this._lastWin.x = this._x + (this._width - this._lastWin.width) / 2;
            }
            else {
                this.emit("Collecting ended");
            }
        };
        WinView.prototype.changeLastWinSequentially = function (lastWin) {
            var _this = this;
            if (lastWin != null && lastWin != 0) {
                var _loop_2 = function (currentAmount) {
                    this_2._tl.add(TweenMax.delayedCall(this_2._delay, function () {
                        _this._lastWin.text = currentAmount.toString();
                        _this._lastWin.x =
                            _this._x + (_this._width - _this._lastWin.width) / 2;
                    }));
                };
                var this_2 = this;
                for (var currentAmount = 1; currentAmount <= lastWin; currentAmount++) {
                    _loop_2(currentAmount);
                }
                this._tl.call(this.stopChangingLastWin, null, this);
            }
            else {
                this.stopChangingLastWin();
            }
        };
        // public changeLastWinSequentially(lastWin: number): void {
        //     if (lastWin != null && lastWin != 0) {
        //       const lastWinString = lastWin.toString;
        //       TweenMax.to(this._lastWin, 3, {
        //         text: lastWin.toString()
        //       })
        //     } else {
        //       this._tl.call(this.stopChangingLastWin, null, this);
        //     }
        //   }
        WinView.prototype.buttonCollectClicked = function () {
            this.stopChangingLastWin();
        };
        WinView.prototype.stopChangingLastWin = function () {
            var _this = this;
            this._tl.pause();
            this._tl = new TimelineMax();
            this._tl.call(function () {
                _this.emit("Collecting ended");
            });
        };
        return WinView;
    }(PIXI.Graphics));
    views.WinView = WinView;
})(views || (views = {}));
///<reference path="../views/WinView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
var controllers;
(function (controllers) {
    var WinView = views.WinView;
    var Notification = poker.Notifications;
    var WinController = /** @class */ (function (_super) {
        __extends(WinController, _super);
        function WinController() {
            var _this = _super.call(this, new WinView()) || this;
            _this._collectingEnded = "Collecting ended";
            _this._view.on(_this._collectingEnded, _this.notifyCollectingEnd, _this);
            return _this;
        }
        WinController.prototype.getInterests = function () {
            return [Notification.COLLECTING, Notification.BUTTON_CLICK_COLLECT];
        };
        Object.defineProperty(WinController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        WinController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
                case Notification.COLLECTING: {
                    this._view.changeLastWinSequentially(this.gameModel.lastWin);
                    break;
                }
                case Notification.BUTTON_CLICK_COLLECT: {
                    this._view.buttonCollectClicked();
                    this._view.changeLastWin(this.gameModel.lastWin);
                    break;
                }
            }
        };
        WinController.prototype.notifyCollectingEnd = function () {
            this.sendNotification(Notification.COLLECTING_SUCCESSFUL);
        };
        return WinController;
    }(Pluck.ViewController));
    controllers.WinController = WinController;
})(controllers || (controllers = {}));
///<reference path="../Message.ts"/>
var views;
(function (views) {
    var Message = poker.Message;
    var OptionsView = /** @class */ (function (_super) {
        __extends(OptionsView, _super);
        // private readonly _radius = 16;
        function OptionsView() {
            var _this = _super.call(this) || this;
            _this._x = -900;
            _this._y = 0;
            _this._width = 900;
            _this._height = 800;
            _this._isOpen = false;
            _this.drawFigures();
            _this._button = new views.OptionsButton();
            _this.addChild(_this._button);
            _this._button.on(Message.optionsButtonClicked, _this.moveBoard, _this);
            return _this;
        }
        OptionsView.prototype.drawFigures = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRect(this._x, this._y, this._width, this._height);
            this.endFill();
            var justText = new PIXI.Text("OPTIONS", {
                fill: 0x015d8a,
                fontSize: 30,
                fontWeight: "bolder",
            });
            justText.x = this._x + (this._width - justText.width) / 2;
            justText.y = 30;
            this.addChild(justText);
        };
        OptionsView.prototype.moveBoard = function () {
            if (this._isOpen) {
                this._isOpen = false;
                console.log("CLOSING");
                TweenMax.to(this, 1, {
                    x: 0
                });
            }
            else {
                this._isOpen = true;
                console.log("OPENING");
                TweenMax.to(this, 1, {
                    x: 980
                });
            }
        };
        return OptionsView;
    }(PIXI.Graphics));
    views.OptionsView = OptionsView;
})(views || (views = {}));
///<reference path="../views/OptionsView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
var controllers;
(function (controllers) {
    var OptionsView = views.OptionsView;
    var OptionsController = /** @class */ (function (_super) {
        __extends(OptionsController, _super);
        function OptionsController() {
            //TODO balance must be received from server
            return _super.call(this, new OptionsView()) || this;
        }
        OptionsController.prototype.getInterests = function () {
            return [];
        };
        Object.defineProperty(OptionsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        OptionsController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
            }
        };
        return OptionsController;
    }(Pluck.ViewController));
    controllers.OptionsController = OptionsController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var GambleButtonView = /** @class */ (function (_super) {
        __extends(GambleButtonView, _super);
        function GambleButtonView() {
            var _this = _super.call(this) || this;
            _this._x = 780;
            _this._y = 645;
            _this._width = 160;
            _this._height = 30;
            _this._radius = 16;
            _this._lastWinText = "LAST WIN";
            _this._gambleText = "GAMBLE";
            _this.drawFigure();
            _this.setTexts();
            return _this;
        }
        GambleButtonView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        GambleButtonView.prototype.setTexts = function () {
            this._label = new PIXI.Text(this._lastWinText, {
                fontSize: 15,
                fill: 0x014d8a,
                fontWeight: "bolder",
            });
            this._label.x = this._x + (this._width - this._label.width) / 2;
            this._label.y = this._y + (this._height - this._label.height) / 2;
            this.addChild(this._label);
        };
        return GambleButtonView;
    }(PIXI.Graphics));
    views.GambleButtonView = GambleButtonView;
})(views || (views = {}));
///<reference path="../views/GambleButtonView.ts"/>
var controllers;
(function (controllers) {
    var GambleButtonView = views.GambleButtonView;
    var GambleButtonController = /** @class */ (function (_super) {
        __extends(GambleButtonController, _super);
        function GambleButtonController() {
            return _super.call(this, new GambleButtonView()) || this;
        }
        return GambleButtonController;
    }(Pluck.ViewController));
    controllers.GambleButtonController = GambleButtonController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var InfoView = /** @class */ (function (_super) {
        __extends(InfoView, _super);
        function InfoView() {
            var _this = _super.call(this) || this;
            _this._x = 275;
            _this._y = 575;
            _this._width = 465;
            _this._height = 30;
            _this._radius = 10;
            _this.drawFigure();
            _this.setTexts();
            return _this;
        }
        InfoView.prototype.setTexts = function () {
            this._actionText = new PIXI.Text("PRESS DEAL TO RUN NEW GAME", {
                fontSize: 15,
                fontWeight: "bolder",
                fill: 0xffffff
            });
            this._actionText.x = this._x + (this._width - this._actionText.width) / 2;
            this._actionText.y =
                this._y + (this._height - this._actionText.height) / 2;
            this.addChild(this._actionText);
        };
        InfoView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        InfoView.prototype.changeText = function (newText) {
            if (newText != undefined) {
                this._actionText.text = newText.toUpperCase();
                this._actionText.x =
                    this._x + (this._width - this._actionText.width) / 2;
            }
        };
        return InfoView;
    }(PIXI.Graphics));
    views.InfoView = InfoView;
})(views || (views = {}));
///<reference path="../views/InfoView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
var controllers;
(function (controllers) {
    var InfoView = views.InfoView;
    var Notification = poker.Notifications;
    var InfoController = /** @class */ (function (_super) {
        __extends(InfoController, _super);
        function InfoController() {
            return _super.call(this, new InfoView()) || this;
        }
        InfoController.prototype.getInterests = function () {
            return [
                Notification.CARDS_REVEAL_STARTED,
                Notification.CARDS_REVEAL_ENDED,
                Notification.COLLECTING,
                Notification.COLLECTING_SUCCESSFUL
            ];
        };
        Object.defineProperty(InfoController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        InfoController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
                case Notification.CARDS_REVEAL_STARTED: {
                    this._view.changeText("GOOD LUCK!");
                    break;
                }
                case Notification.CARDS_REVEAL_ENDED: {
                    if (this.gameModel.state == "Deal") {
                        this._view.changeText("SELECT CARDS TO HOLD");
                    }
                    break;
                }
                case Notification.COLLECTING: {
                    this._view.changeText(this.gameModel.lastWinCombination);
                    break;
                }
                case Notification.COLLECTING_SUCCESSFUL: {
                    this._view.changeText("PRESS DEAL TO RUN NEW GAME");
                    break;
                }
            }
        };
        return InfoController;
    }(Pluck.ViewController));
    controllers.InfoController = InfoController;
})(controllers || (controllers = {}));
///<reference path="../views/GameView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="./CardsController.ts"/>
///<reference path="./ButtonsController.ts"/>
///<reference path="./BalanceController.ts"/>
///<reference path="./PriceBoardController.ts"/>
///<reference path="./WinController.ts"/>
///<reference path="./OptionsController.ts"/>
///<reference path="./GambleButtonController.ts"/>
///<reference path="./InfoController.ts"/>
///<reference path="../Main.ts"/>
///<reference path="../types/state.ts"/>
///<reference path="../types/combination.ts"/>
var controllers;
(function (controllers) {
    var GameView = views.GameView;
    var Notifications = poker.Notifications;
    var GameModel = model.GameModel;
    var WinController = controllers.WinController;
    var OptionsController = controllers.OptionsController;
    var InfoController = controllers.InfoController;
    var GambleButtonController = controllers.GambleButtonController;
    var CardsController = controllers.CardsController;
    var ButtonsController = controllers.ButtonsController;
    var BalanceController = controllers.BalanceController;
    var PriceBoardController = controllers.PriceBoardController;
    var GameController = /** @class */ (function (_super) {
        __extends(GameController, _super);
        function GameController(facade) {
            var _this = _super.call(this, new GameView(), new GameModel()) || this;
            _this.mModel.facade = facade;
            _this.init();
            return _this;
        }
        Object.defineProperty(GameController.prototype, "data", {
            set: function (val) {
                this.mModel.data = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameController.prototype, "mModel", {
            get: function () {
                return this._model;
            },
            enumerable: true,
            configurable: true
        });
        GameController.prototype.init = function () {
            this._app = new PIXI.Application({
                width: 1280,
                height: 720,
            });
            this._app.stage.addChild(this._view);
            document.getElementById("display-port").appendChild(this._app.view);
        };
        GameController.prototype.getInterests = function () {
            return [Notifications.BUTTON_CLICK_DEAL];
        };
        GameController.prototype.handleNotification = function (note) {
            switch (note.name) {
                case Notifications.BUTTON_CLICK_DEAL: {
                }
            }
        };
        GameController.prototype.addControllers = function () {
            this._cardsController = new CardsController();
            this.addChildViewController(this._cardsController);
            this._buttonsController = new ButtonsController();
            this.addChildViewController(this._buttonsController);
            this._balanceController = new BalanceController();
            this.addChildViewController(this._balanceController);
            this._winController = new WinController();
            this.addChildViewController(this._winController);
            this._gambleButtonController = new GambleButtonController();
            this.addChildViewController(this._gambleButtonController);
            this._infoController = new InfoController();
            this.addChildViewController(this._infoController);
            this._priceBoardController = new PriceBoardController();
            this.addChildViewController(this._priceBoardController);
            this._optionsController = new OptionsController();
            this.addChildViewController(this._optionsController);
        };
        GameController.WIDTH = 1280;
        GameController.HEIGHT = 720;
        return GameController;
    }(Pluck.ViewController));
    controllers.GameController = GameController;
})(controllers || (controllers = {}));
///<reference path="../Notifications.ts"/>
var model;
(function (model) {
    var Notifications = poker.Notifications;
    var Resources = /** @class */ (function (_super) {
        __extends(Resources, _super);
        function Resources() {
            return _super.call(this) || this;
        }
        Resources.prototype.load = function () {
            PIXI.loader
                .add("background", "./../../bin/assets/background.png")
                .add("sound", "./assets/sound.png")
                .add("options", "./assets/options.png")
                .add("cleanCard", "./assets/mainCards/card_clean.png")
                .add("cardBackBlack", "./assets/mainCards/cardBackBlack.png")
                .add("cardBackRed", "./assets/mainCards/cardBackRed.png")
                .add("clubs", "./assets/mainCards/clubs.png")
                .add("diamonds", "./assets/mainCards/diamonds.png")
                .add("hearts", "./assets/mainCards/hearts.png")
                .add("spades", "./assets/mainCards/spades.png")
                .add("ace", "./assets/mainCards/aceImage.png")
                .add("king", "./assets/mainCards/kingImage.png")
                .add("queen", "./assets/mainCards/queenImage.png")
                .add("jack", "./assets/mainCards/jackImage.png")
                .add("heldLabel", "./assets/mainCards/held.png")
                .add("winLabel", "./assets/mainCards/win_en.png")
                .add("gambleRed", "./assets/gamble/gambleRed.png")
                .add("gambleWin", "./assets/gamble/gambleWin.png")
                .add("buttonInactive", "./assets/button/betButtonInactive.png")
                .add("buttonActive", "./assets/button/betButtonActive.png")
                .add("cardBlink", "./assets/commonSounds/cardBlink.mp3")
                .add("cardSwap", "./assets/commonSounds/cardSwap.mp3")
                .add("collectButton", "./assets/commonSounds/collectButton.mp3")
                .add("creditAnimation", "./assets/commonSounds/creditAnimation.mp3")
                .add("gambleCardClick", "./assets/commonSounds/gambleCardClick.mp3")
                .add("gambleOpen", "./assets/commonSounds/gambleOpen.mp3")
                .add("gambleWon", "./assets/commonSounds/gambleWon.mp3")
                .add("holdCard", "./assets/commonSounds/holdCard.mp3")
                .add("mainButton", "./assets/commonSounds/mainButton.mp3")
                .add("takeWin", "./assets/commonSounds/takeWin.mp3")
                .add("volume", "./assets/commonSounds/volume.mp3");
            PIXI.loader.on("complete", this.onLoad.bind(this));
            PIXI.loader.load();
        };
        Resources.prototype.onLoad = function () {
            this.emit(Notifications.RESOURCES_LOADED);
        };
        return Resources;
    }(PIXI.utils.EventEmitter));
    model.Resources = Resources;
})(model || (model = {}));
///<reference path="./controllers/GameController.ts"/>
///<reference path="models/Resources.ts"/>
///<reference path="Notifications.ts"/>
///<reference path="./types/combination.ts"/>
var poker;
(function (poker) {
    var GameController = controllers.GameController;
    var Resources = model.Resources;
    var Notification = poker.Notifications;
    var Main = /** @class */ (function (_super) {
        __extends(Main, _super);
        function Main() {
            var _this = _super.call(this) || this;
            _this._requestDeal = "requestDeal";
            _this._requestDraw = "requestDraw";
            _this._requestCollect = "requestCollect";
            _this._requestRestart = "requestRestart";
            _this._res = new Resources();
            _this._res.load();
            _this._res.on(Notification.RESOURCES_LOADED, _this.onResourcesLoaded, _this);
            return _this;
        }
        Object.defineProperty(Main.prototype, "data", {
            set: function (val) {
                this._rootController.data = val;
            },
            enumerable: true,
            configurable: true
        });
        Main.prototype.onResourcesLoaded = function () {
            this._rootController = new GameController(this);
            Pluck.ViewController.setRoot(this._rootController);
            this._rootController.addControllers();
            this.emit("resources loaded");
        };
        Main.prototype.requestDeal = function (bet) {
            this.emit(this._requestDeal, {
                bet: bet
            });
        };
        Main.prototype.requestDraw = function (indexes) {
            console.log(indexes);
            this.emit(this._requestDraw, indexes);
        };
        Main.prototype.requestRestart = function () {
            this.emit(this._requestRestart);
        };
        Main.prototype.requestCollect = function () {
            this.emit(this._requestCollect);
        };
        return Main;
    }(PIXI.utils.EventEmitter));
    poker.Main = Main;
})(poker || (poker = {}));
///<reference path="../types/combination.ts"/>
var server;
(function (server) {
    var CardsUtils = /** @class */ (function () {
        function CardsUtils() {
        }
        CardsUtils.hasWin = function (card) {
            return (this.onePairOfJacksOrBetter(card) ||
                this.twoPair(card) ||
                this.threeOfAKind(card) ||
                this.straight(card) ||
                this.flush(card));
        };
        CardsUtils.getWinIndexes = function (combination, card) {
            switch (combination) {
                case "four of a kind": {
                    var winIndexes = this.spliceOneExclusiveIndex(card);
                    return winIndexes;
                }
                case "three of a kind": {
                    var winIndexes = this.spliceTwoExclusiveIndexes(card);
                    return winIndexes;
                }
                case "two pair": {
                    var winIndexes = this.spliceOneExclusiveIndex(card);
                    return winIndexes;
                }
                case "one pair of jacks or better": {
                    var winIndexes = this.spliceThreeExclusiveIndexes(card);
                    return winIndexes;
                }
                default: {
                    return [0, 1, 2, 3, 4];
                }
            }
        };
        CardsUtils.spliceThreeExclusiveIndexes = function (card) {
            var winIndexes = [0, 1, 2, 3, 4];
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort(this.sortAsNumbers);
            var pairsRank;
            for (var index = 0; index < sortedRanks.length - 1; index++) {
                if (sortedRanks[index] == sortedRanks[index + 1]) {
                    pairsRank = sortedRanks[index];
                    break;
                }
            }
            var deletedIndexes = 0;
            for (var index = 0; index < card.length; index++) {
                if (this.getRank(card[index]) != pairsRank) {
                    winIndexes.splice(index - deletedIndexes++, 1);
                }
            }
            return winIndexes;
        };
        CardsUtils.spliceTwoExclusiveIndexes = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort(this.sortAsNumbers);
            var winIndexes = [0, 1, 2, 3, 4];
            var deletedIndexes = 0;
            for (var _i = 0, card_1 = card; _i < card_1.length; _i++) {
                var currentCard = card_1[_i];
                var currentRank = this.getRank(currentCard);
                if (currentRank != sortedRanks[2]) {
                    winIndexes.splice(card.indexOf(currentCard) - deletedIndexes++, 1);
                }
            }
            return winIndexes;
        };
        CardsUtils.spliceOneExclusiveIndex = function (card) {
            var ranks = this.getRanks(card);
            var winIndexes = [0, 1, 2, 3, 4];
            var exclusiveRank = 0;
            var exclusiveCard;
            for (var _i = 0, ranks_1 = ranks; _i < ranks_1.length; _i++) {
                var currentRank = ranks_1[_i];
                exclusiveRank ^= currentRank;
            }
            for (var _a = 0, card_2 = card; _a < card_2.length; _a++) {
                var currentCard = card_2[_a];
                if (this.getRank(currentCard) == exclusiveRank) {
                    exclusiveCard = currentCard;
                }
            }
            console.log("card indexof " + card.indexOf(exclusiveCard));
            winIndexes.splice(card.indexOf(exclusiveCard), 1);
            console.log("win indexes: " + winIndexes);
            return winIndexes;
        };
        CardsUtils.royalFlush = function (card) {
            return this.flush(card) && this.straight(card) && this.hasAce(card);
        };
        CardsUtils.straightFlush = function (card) {
            return this.flush(card) && this.straight(card);
        };
        CardsUtils.getCombination = function (card) {
            if (this.royalFlush(card)) {
                return "royal flush";
            }
            if (this.straightFlush(card)) {
                return "straight flush";
            }
            if (this.fourOfAKind(card)) {
                return "four of a kind";
            }
            if (this.fullHouse(card)) {
                return "full house";
            }
            if (this.flush(card)) {
                return "flush";
            }
            if (this.straight(card)) {
                return "straight";
            }
            if (this.threeOfAKind(card)) {
                return "three of a kind";
            }
            if (this.twoPair(card)) {
                return "two pair";
            }
            if (this.onePairOfJacksOrBetter(card)) {
                return "one pair of jacks or better";
            }
            return null;
        };
        CardsUtils.fourOfAKind = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort();
            //xxxxy
            var firstCase = this.isFourOfAKind(sortedRanks[0], sortedRanks[1], sortedRanks[2], sortedRanks[3]);
            //yxxxx
            var secondCase = this.isFourOfAKind(sortedRanks[1], sortedRanks[2], sortedRanks[3], sortedRanks[4]);
            return firstCase || secondCase;
        };
        CardsUtils.isFourOfAKind = function (card1Rank, card2Rank, card3Rank, card4Rank) {
            return (card1Rank == card2Rank &&
                card2Rank == card3Rank &&
                card3Rank == card4Rank);
        };
        CardsUtils.fullHouse = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort();
            //xxyyy
            var firstCase = this.isPair(sortedRanks[0], sortedRanks[1]) &&
                this.isThreeOfAKind(sortedRanks[2], sortedRanks[3], sortedRanks[4]);
            //xxxyy
            var secondCase = this.isThreeOfAKind(sortedRanks[0], sortedRanks[1], sortedRanks[2]) &&
                this.isPair(sortedRanks[3], sortedRanks[4]);
            return firstCase || secondCase;
        };
        CardsUtils.flush = function (card) {
            var suits = this.getSuits(card);
            var sortedSuits = suits.sort();
            if (sortedSuits[0] == sortedSuits[suits.length - 1]) {
                return true;
            }
            return false;
        };
        CardsUtils.straight = function (card) {
            return this.isNormalStraight(card) || this.isBigStraight(card);
        };
        //abcde
        CardsUtils.isNormalStraight = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort(this.sortAsNumbers);
            return (sortedRanks[0] == sortedRanks[1] - 1 &&
                sortedRanks[1] == sortedRanks[2] - 1 &&
                sortedRanks[2] == sortedRanks[3] - 1 &&
                sortedRanks[3] == sortedRanks[4] - 1);
        };
        CardsUtils.isBigStraight = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort(this.sortAsNumbers);
            return (sortedRanks[0] == 0 &&
                sortedRanks[1] == 10 &&
                sortedRanks[2] == 11 &&
                sortedRanks[3] == 12 &&
                sortedRanks[4] == 13);
        };
        CardsUtils.threeOfAKind = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort();
            //xxx**
            var firstCase = this.isThreeOfAKind(sortedRanks[0], sortedRanks[1], sortedRanks[2]);
            //*xxx*
            var secondCase = this.isThreeOfAKind(sortedRanks[1], sortedRanks[2], sortedRanks[3]);
            //**xxx
            var thirdCase = this.isThreeOfAKind(sortedRanks[2], sortedRanks[3], sortedRanks[4]);
            return firstCase || secondCase || thirdCase;
        };
        CardsUtils.isThreeOfAKind = function (card1Rank, card2Rank, card3Rank) {
            return card1Rank == card2Rank && card2Rank == card3Rank;
        };
        CardsUtils.twoPair = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort();
            //xxyy*
            var firstCase = this.isPair(sortedRanks[0], sortedRanks[1]) &&
                this.isPair(sortedRanks[2], sortedRanks[3]);
            //xx*yy
            var secondCase = this.isPair(sortedRanks[0], sortedRanks[1]) &&
                this.isPair(sortedRanks[3], sortedRanks[4]);
            //*xxyy
            var thirdCase = this.isPair(sortedRanks[1], sortedRanks[2]) &&
                this.isPair(sortedRanks[3], sortedRanks[4]);
            return firstCase || secondCase || thirdCase;
        };
        CardsUtils.isPair = function (card1Rank, card2Rank) {
            return card1Rank == card2Rank;
        };
        CardsUtils.onePairOfJacksOrBetter = function (card) {
            var ranks = this.getRanks(card);
            var sortedRanks = ranks.sort();
            // xx***
            var firstCase = this.isPairJacksOrBetter(sortedRanks[0], sortedRanks[1]);
            //*xx**
            var secondCase = this.isPairJacksOrBetter(sortedRanks[1], sortedRanks[2]);
            //**xx*
            var thirdCase = this.isPairJacksOrBetter(sortedRanks[2], sortedRanks[3]);
            //***xx
            var forthCase = this.isPairJacksOrBetter(sortedRanks[3], sortedRanks[4]);
            return firstCase || secondCase || thirdCase || forthCase;
        };
        CardsUtils.isPairJacksOrBetter = function (card1Rank, card2Rank) {
            return card1Rank == card2Rank && (card2Rank == 0 || card1Rank >= 10);
        };
        CardsUtils.getSuit = function (card) {
            return Math.floor(card / 13);
        };
        CardsUtils.getRank = function (card) {
            return card % 13;
        };
        CardsUtils.getSuits = function (card) {
            var suits = [];
            for (var _i = 0, card_3 = card; _i < card_3.length; _i++) {
                var currentCard = card_3[_i];
                suits.push(this.getSuit(currentCard));
            }
            return suits;
        };
        CardsUtils.getRanks = function (card) {
            var ranks = [];
            for (var _i = 0, card_4 = card; _i < card_4.length; _i++) {
                var currentCard = card_4[_i];
                ranks.push(this.getRank(currentCard));
            }
            return ranks;
        };
        CardsUtils.hasAce = function (cards) {
            for (var _i = 0, cards_1 = cards; _i < cards_1.length; _i++) {
                var card = cards_1[_i];
                if (this.getRank(card) == 0) {
                    return true;
                }
            }
            return false;
        };
        CardsUtils.sortAsNumbers = function (a, b) {
            return a - b;
        };
        return CardsUtils;
    }());
    server.CardsUtils = CardsUtils;
})(server || (server = {}));
///<reference path="../types/state.ts"/>
///<reference path="../Main.ts"/>
///<reference path="../server/CardsUtils.ts"/>
///<reference path="../types/combination.ts"/>
var server;
(function (server) {
    var CardsUtils = server.CardsUtils;
    var Server = /** @class */ (function () {
        function Server(facade, balance) {
            this._requestDeal = "requestDeal";
            this._requestDraw = "requestDraw";
            this._requestCollect = "requestCollect";
            this._resourceLoaded = "resources loaded";
            this._prices = new Map();
            this._cards = [];
            this._winCardsIndexes = [];
            this._balance = balance;
            this._facade = facade;
            this._state = "Init";
            this.setPrices();
            this._facade.on(this._requestDeal, this.requestDeal, this);
            this._facade.on(this._requestDraw, this.requestDraw, this);
            this._facade.on(this._requestCollect, this.requestCollect, this);
            this._facade.on(this._resourceLoaded, this.setBalance, this);
        }
        Server.prototype.requestDeal = function (request) {
            if (this._state == "Deal") {
                this._bet = request.bet;
                if (this._balance >= request.bet) {
                    this.setRandomCards([0, 1, 2, 3, 4]);
                    this._balance -= request.bet;
                    this._facade.data = {
                        state: this._state,
                        balance: this._balance,
                        cards: this._cards
                    };
                    this.changeState("Draw");
                    console.log("SERVER: Deal was successfull.");
                }
                else {
                    console.error("You dont have enough balance");
                }
            }
            else {
                console.error("To Deal You must be in Deal state. Your state now is " + this._state);
            }
        };
        Server.prototype.setPrices = function () {
            this._prices.set("one pair of jacks or better", 1);
            this._prices.set("two pair", 2);
            this._prices.set("three of a kind", 3);
            this._prices.set("straight", 4);
            this._prices.set("flush", 5);
            this._prices.set("full house", 9);
            this._prices.set("four of a kind", 25);
            this._prices.set("straight flush", 50);
            this._prices.set("royal flush", 250);
        };
        Server.prototype.requestDraw = function (indexes) {
            if (this._state == "Draw") {
                // this.setRandomCards(indexes);
                this.setSelectedCards([0, 13, 47, 26, 39]);
                this._state = "Collect";
                this._facade.data = {
                    state: "Draw",
                    cards: this._cards
                };
            }
            else {
                console.log("You cannot draw if your state is not Draw");
            }
            console.log("SERVER: Draw was successfull.");
        };
        Server.prototype.requestCollect = function () {
            if (this._state == "Collect") {
                var winAmount = 0;
                if (CardsUtils.hasWin(this._cards)) {
                    this._winCombination = CardsUtils.getCombination(this._cards);
                    this._winCardsIndexes = CardsUtils.getWinIndexes(this._winCombination, this._cards);
                    winAmount = this._prices.get(this._winCombination) * this._bet;
                }
                this._balance += winAmount;
                this._facade.data = {
                    state: this._state,
                    balance: this._balance,
                    winAmount: winAmount,
                    winCombination: this._winCombination,
                    winCardsIndexes: this._winCardsIndexes
                };
                console.log;
            }
            else {
                console.error("To Collect You must be in Collect state. Your state now is " +
                    this._state);
            }
            console.log("Collecting started successfully");
            this.restartValues();
            this._state = "Deal";
        };
        Server.prototype.restartValues = function () {
            this._winCardsIndexes = [];
        };
        Server.prototype.setSelectedCards = function (indexes) {
            this._cards[0] = indexes[0];
            this._cards[1] = indexes[1];
            this._cards[2] = indexes[2];
            this._cards[3] = indexes[3];
            this._cards[4] = indexes[4];
        };
        Server.prototype.setRandomCards = function (indexes) {
            for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {
                var index = indexes_2[_i];
                var card = void 0;
                do {
                    card = Math.floor(Math.random() * 52);
                } while (this.cardExists(card));
                this._cards[index] = card;
            }
        };
        Server.prototype.setBalance = function () {
            var data = {
                state: this._state,
                balance: this._balance
            };
            this._facade.data = data;
            this._state = "Deal";
        };
        Server.prototype.changeState = function (newState) {
            this._state = newState;
        };
        Server.prototype.cardExists = function (card) {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var currentCard = _a[_i];
                if (currentCard == card) {
                    return true;
                }
            }
            return false;
        };
        return Server;
    }());
    server.Server = Server;
})(server || (server = {}));
///<reference path="../types/rank.ts"/>
///<reference path="../types/suit.ts"/>
var views;
(function (views) {
    var Card = /** @class */ (function (_super) {
        __extends(Card, _super);
        function Card() {
            var _this = _super.call(this) || this;
            _this._suitLabelSize = 55;
            _this._specificSpriteX = 70;
            _this._specificSpriteY = 10;
            _this._red = 0xff0000;
            _this._black = 0x000000;
            _this.init();
            _this.texture = _this._backTexture;
            _this.on("pointerdown", _this.onClick);
            return _this;
        }
        Card.prototype.setSuitAndRank = function (rank, suit) {
            this._rank = rank;
            this._suit = suit;
            this.addSuitAndRank();
        };
        Object.defineProperty(Card.prototype, "rank", {
            get: function () {
                return this._rank;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Card.prototype, "suit", {
            get: function () {
                return this._suit;
            },
            enumerable: true,
            configurable: true
        });
        Card.prototype.init = function () {
            this._backTexture = PIXI.Texture.from("cardBackBlack");
            this._faceTexture = PIXI.Texture.from("cleanCard");
            this._heldLabel = PIXI.Sprite.from("heldLabel");
            this._heldLabel.x = (this._faceTexture.width - this._heldLabel.width) / 2 + 5;
            this._heldLabel.y = 5;
            this._winLabel = PIXI.Sprite.from("winLabel");
            this._winLabel.x = (this._faceTexture.width - this._winLabel.width) / 2 + 5;
            this._winLabel.y = (this._faceTexture.height - this._winLabel.height) - 10;
            this._isHeld = false;
        };
        Card.prototype.addSuitAndRank = function () {
            this._suitLabel = this.getSuitSprite(this._suit);
            if (this._suit == "D" || this._suit == "H") {
                this._rankLabel = new PIXI.Text(this._rank, {
                    fontSize: this._suitLabelSize,
                    fontWeight: "bolder",
                    fill: this._red,
                });
            }
            else {
                this._rankLabel = new PIXI.Text(this._rank, {
                    fontSize: this._suitLabelSize,
                    fontWeight: "bolder",
                    fill: this._black,
                });
            }
            this._rankLabel.x = 30 - 8 * this._rankLabel.text.length;
            this._rankLabel.y = 3;
            this.addSpecificSprite();
        };
        Card.prototype.onClick = function () {
            if (!this.isHeld) {
                this.hold();
            }
            else {
                this.release();
            }
        };
        Card.prototype.addSpecificSprite = function () {
            if (!Number(this._rank)) {
                switch (this._rank) {
                    case "J": {
                        this._specificSprite = PIXI.Sprite.from("jack");
                        break;
                    }
                    case "Q": {
                        this._specificSprite = PIXI.Sprite.from("queen");
                        break;
                    }
                    case "K": {
                        this._specificSprite = PIXI.Sprite.from("king");
                        break;
                    }
                    case "A": {
                        this._specificSprite = PIXI.Sprite.from("ace");
                        break;
                    }
                }
                this._specificSprite.x = this._specificSpriteX;
                this._specificSprite.y = this._specificSpriteY;
            }
        };
        Object.defineProperty(Card.prototype, "isHeld", {
            get: function () {
                return this._isHeld;
            },
            enumerable: true,
            configurable: true
        });
        Card.prototype.reveal = function () {
            if (!this._isHeld) {
                this.texture = this._faceTexture;
                this.addChild(this._suitLabel);
                this.addChild(this._rankLabel);
                if (this._specificSprite) {
                    this.addChild(this._specificSprite);
                }
            }
        };
        Card.prototype.hide = function () {
            this._specificSprite = null;
            this.removeChildren();
            this.texture = this._backTexture;
        };
        Card.prototype.hold = function () {
            this._isHeld = true;
            this.addChild(this._heldLabel);
        };
        Card.prototype.win = function () {
            this.addChild(this._winLabel);
        };
        Card.prototype.release = function () {
            this._isHeld = false;
            this.removeChild(this._heldLabel);
        };
        Card.prototype.getSuitSprite = function (suit) {
            switch (suit) {
                case "C": {
                    return PIXI.Sprite.from("clubs");
                }
                case "D": {
                    return PIXI.Sprite.from("diamonds");
                }
                case "H": {
                    return PIXI.Sprite.from("hearts");
                }
                case "S": {
                    return PIXI.Sprite.from("spades");
                }
            }
        };
        return Card;
    }(PIXI.Sprite));
    views.Card = Card;
})(views || (views = {}));
///<reference path="../Message.ts"/>
var views;
(function (views) {
    var Message = poker.Message;
    var OptionsButton = /** @class */ (function (_super) {
        __extends(OptionsButton, _super);
        function OptionsButton() {
            var _this = _super.call(this) || this;
            _this.buttonMode = true;
            _this.interactive = true;
            _this.on("pointerdown", _this.onPointerDown);
            _this.texture = PIXI.Texture.from("options");
            _this.x = 10;
            _this.y = 10;
            _this.width = 75;
            _this.height = 75;
            return _this;
        }
        OptionsButton.prototype.onPointerDown = function () {
            this.emit(Message.optionsButtonClicked);
        };
        return OptionsButton;
    }(PIXI.Sprite));
    views.OptionsButton = OptionsButton;
})(views || (views = {}));
//# sourceMappingURL=Game.min.js.map