var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var poker;
(function (poker) {
    var Notifications = /** @class */ (function () {
        function Notifications() {
        }
        Notifications.RESOURCES_LOADED = "resourcesLoaded";
        return Notifications;
    }());
    poker.Notifications = Notifications;
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var poker;
(function (poker) {
    var controllers;
    (function (controllers) {
        var Notifications = poker.Notifications;
        var GameController = /** @class */ (function (_super) {
            __extends(GameController, _super);
            function GameController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GameController.prototype.getInterests = function () {
                return [Notifications.RESOURCES_LOADED];
            };
            GameController.prototype.handleNotification = function (note) {
                switch (note.name) {
                    case Notifications.RESOURCES_LOADED:
                        // create cards controller
                        break;
                }
            };
            return GameController;
        }(Pluck.ViewController));
        controllers.GameController = GameController;
    })(controllers = poker.controllers || (poker.controllers = {}));
})(poker || (poker = {}));
///<reference path="./controllers/GameController.ts"/>
var poker;
(function (poker) {
    var Main = /** @class */ (function () {
        function Main() {
            var _this = this;
            console.log("Main");
            window.onload = function () {
                _this.startLoadingAssets();
            };
            // this.resources.load()
        }
        Main.prototype.startLoadingAssets = function () {
            var _this = this;
            // PIXI.loader.add(this.onAssetsLoaded);
            PIXI.loader.on("complete", function () {
                _this.onAssetsLoaded();
            });
        };
        Main.prototype.onAssetsLoaded = function () {
            this.createRenderer();
            console.log("dasfad");
            // Game;
        };
        Main.prototype.createRenderer = function () { };
        return Main;
    }());
    poker.Main = Main;
})(poker || (poker = {}));
var poker;
(function (poker) {
    var model;
    (function (model) {
        var Resources = /** @class */ (function (_super) {
            __extends(Resources, _super);
            function Resources() {
                return _super.call(this) || this;
            }
            Resources.prototype.load = function () {
            };
            Resources.prototype.onLoad = function () {
                // this.sendNotification(Notifications.RESOURCES_LOADED)
            };
            return Resources;
        }(Pluck.Model));
        model.Resources = Resources;
    })(model = poker.model || (poker.model = {}));
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var poker;
(function (poker) {
    var view;
    (function (view) {
        var DView = /** @class */ (function (_super) {
            __extends(DView, _super);
            function DView() {
                return _super.call(this) || this;
                //
            }
            return DView;
        }(PIXI.Container));
        view.DView = DView;
    })(view = poker.view || (poker.view = {}));
})(poker || (poker = {}));
//# sourceMappingURL=Game.min.js.map