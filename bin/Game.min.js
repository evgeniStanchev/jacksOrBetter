var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var poker;
(function (poker) {
    var Notifications = /** @class */ (function () {
        function Notifications() {
        }
        Notifications.RESOURCES_LOADED = "resourcesLoaded";
        Notifications.DRAW_RECEIVED = 'drawReceived';
        Notifications.DEAL_RECEIVED = 'dealReceived';
        return Notifications;
    }());
    poker.Notifications = Notifications;
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var views;
(function (views) {
    var GameView = /** @class */ (function (_super) {
        __extends(GameView, _super);
        function GameView() {
            var _this = _super.call(this) || this;
            var background = PIXI.Sprite.fromImage("./assets/background.png");
            _this.addChild(background);
            return _this;
        }
        return GameView;
    }(PIXI.Container));
    views.GameView = GameView;
})(views || (views = {}));
var model;
(function (model) {
    var GameModel = /** @class */ (function (_super) {
        __extends(GameModel, _super);
        function GameModel() {
            var _this = _super.call(this) || this;
            _this.balance = 5000;
            return _this;
        }
        return GameModel;
    }(Pluck.Model));
    model.GameModel = GameModel;
})(model || (model = {}));
var views;
(function (views) {
    var CardsView = /** @class */ (function (_super) {
        __extends(CardsView, _super);
        function CardsView() {
            var _this = _super.call(this) || this;
            _this._speed = 1;
            _this._cards = [];
            _this.init();
            return _this;
        }
        CardsView.prototype.init = function () {
            for (var index = 0; index < CardsView.COUNT; index++) {
                var newCard = new views.Card();
                newCard.x = CardsView.X;
                newCard.x += index * (CardsView.CARD_WIDTH + CardsView.DISTANCE_BETWEEN);
                newCard.y = CardsView.Y;
                this._cards.push(newCard);
                this.addChild(newCard);
            }
        };
        Object.defineProperty(CardsView.prototype, "cards", {
            get: function () {
                return this._cards;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsView.prototype, "revealSpeed", {
            set: function (val) {
                this._speed = val;
            },
            enumerable: true,
            configurable: true
        });
        CardsView.prototype.revealCards = function () {
            for (var index = 0; index < this._cards.length; index++) {
                if (!this._cards[index].isHeld()) {
                    //TODO reveal the card
                }
            }
        };
        CardsView.prototype.holdCard = function (index) {
            this._cards[index].hold();
        };
        CardsView.prototype.releaseCard = function (index) {
            this._cards[index].release();
        };
        CardsView.prototype.releaseAllCards = function () {
            this._cards.forEach(function (card) {
                card.release();
            });
        };
        CardsView.COUNT = 5;
        CardsView.X = 90;
        CardsView.Y = 235;
        CardsView.CARD_WIDTH = 170;
        CardsView.CARD_HEIGHT = 235;
        CardsView.DISTANCE_BETWEEN = 10;
        return CardsView;
    }(PIXI.Container));
    views.CardsView = CardsView;
})(views || (views = {}));
///<reference path="../views/CardsView.ts"/>
///<reference path="../Notifications.ts"/>
var controllers;
(function (controllers) {
    var CardsView = views.CardsView;
    var Notifications = poker.Notifications;
    var CardsController = /** @class */ (function (_super) {
        __extends(CardsController, _super);
        function CardsController() {
            return _super.call(this, new CardsView()) || this;
            // for (const card of this.view.cards) {
            //     card.on("click", this.onCardClick, this);
            // }
            // const mModel = this.gameModel;
            // console.log(mModel);
        }
        CardsController.prototype.getInterests = function () {
            return [];
        };
        CardsController.prototype.handleNotification = function (notification) {
            switch (notification.name) {
                case Notifications.DEAL_RECEIVED: {
                    this.view.revealCards();
                    break;
                }
            }
        };
        Object.defineProperty(CardsController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        CardsController.prototype.onCardClick = function (e) {
            //
            var card = e.target;
            if (this.gameModel.balance > 0) {
                card.hold();
            }
        };
        return CardsController;
    }(Pluck.ViewController));
    controllers.CardsController = CardsController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var BetButtonsView = /** @class */ (function (_super) {
        __extends(BetButtonsView, _super);
        function BetButtonsView() {
            var _this = _super.call(this) || this;
            _this._x = views.CardsView.X + views.CardsView.DISTANCE_BETWEEN + views.CardsView.CARD_WIDTH;
            _this._y = views.CardsView.Y + views.CardsView.CARD_HEIGHT + 10;
            _this._buttons = [];
            _this._bets = [];
            _this.setBets();
            _this.init();
            _this.abonate();
            return _this;
        }
        BetButtonsView.prototype.setBets = function () {
            this._bets[0] = 1;
            this._bets[1] = 2;
            this._bets[2] = 3;
            this._bets[3] = 5;
            this._bets[4] = 10;
        };
        BetButtonsView.prototype.abonate = function () {
            var _this = this;
            this._buttons.forEach(function (button) {
                button.on("buttonSelected", _this.selectButton, _this);
            });
        };
        BetButtonsView.prototype.init = function () {
            for (var index = 0; index < BetButtonsView.COUNT; index++) {
                var newButton = new views.BetButton(this._bets[index]);
                newButton.x = this._x;
                newButton.x += index * (BetButtonsView.DISTANCE_BETWEEN + BetButtonsView.BUTTON_WIDTH);
                newButton.y = this._y;
                this._buttons.push(newButton);
                this.addChild(newButton);
            }
        };
        BetButtonsView.prototype.selectButton = function (selectedButton) {
            if (this._selectedButton == selectedButton) {
                console.log("the selected button is this");
                return;
            }
            this._buttons.forEach(function (button) {
                if (button == selectedButton) {
                    button.selectButton();
                }
                else {
                    if (button.isSelected) {
                        button.deselectButton();
                    }
                }
            });
            this._selectedButton = selectedButton;
        };
        BetButtonsView.COUNT = 5;
        BetButtonsView.BUTTON_WIDTH = 86;
        BetButtonsView.DISTANCE_BETWEEN = 10;
        return BetButtonsView;
    }(PIXI.Container));
    views.BetButtonsView = BetButtonsView;
})(views || (views = {}));
///<reference path="../views/BetButtonsView.ts"/>
var controllers;
(function (controllers) {
    var BetButtonsView = views.BetButtonsView;
    var ButtonsController = /** @class */ (function (_super) {
        __extends(ButtonsController, _super);
        function ButtonsController() {
            return _super.call(this, new BetButtonsView()) || this;
        }
        return ButtonsController;
    }(Pluck.ViewController));
    controllers.ButtonsController = ButtonsController;
})(controllers || (controllers = {}));
///<reference path="../views/GameView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="./CardsController.ts"/>
///<reference path="./ButtonsController.ts"/>
var controllers;
(function (controllers) {
    var GameView = views.GameView;
    var Notifications = poker.Notifications;
    var GameModel = model.GameModel;
    var CardsController = controllers.CardsController;
    var ButtonsController = controllers.ButtonsController;
    var GameController = /** @class */ (function (_super) {
        __extends(GameController, _super);
        function GameController() {
            var _this = _super.call(this, new GameView(), new GameModel()) || this;
            _this.init();
            return _this;
        }
        GameController.prototype.init = function () {
            this._app = new PIXI.Application({
                width: 1280,
                height: 720,
            });
            this._app.stage.addChild(this._view);
            document.getElementById("display-port").appendChild(this._app.view);
        };
        GameController.prototype.getInterests = function () {
            return [Notifications.RESOURCES_LOADED];
        };
        GameController.prototype.handleNotification = function (note) {
            switch (note.name
            // case Notifications.RESOURCES_LOADED:
            //     this.addControllers();
            //     break;
            ) {
            }
        };
        GameController.prototype.addControllers = function () {
            this._cardsController = new CardsController();
            this.addChildViewController(this._cardsController);
            this._buttonsController = new ButtonsController();
            this.addChildViewController(this._buttonsController);
        };
        GameController.WIDTH = 1280;
        GameController.HEIGHT = 720;
        return GameController;
    }(Pluck.ViewController));
    controllers.GameController = GameController;
})(controllers || (controllers = {}));
///<reference path="../Notifications.ts"/>
var model;
(function (model) {
    var Notifications = poker.Notifications;
    var Resources = /** @class */ (function (_super) {
        __extends(Resources, _super);
        function Resources() {
            return _super.call(this) || this;
        }
        Resources.prototype.load = function () {
            PIXI.loader
                .add("background", "./assets/background.png")
                .add("sound", "./assets/sound.png")
                .add("cleanCard", "./assets/mainCards/card_clean.png")
                .add("cardBackBlack", "./assets/mainCards/cardBackBlack.png")
                .add("cardBackRed", "./assets/mainCards/cardBackRed.png")
                .add("clubs", "./assets/mainCards/clubs.png")
                .add("diamonds", "./assets/mainCards/diamonds.png")
                .add("hearts", "./assets/mainCards/hearts.png")
                .add("spades", "./assets/mainCards/spades.png")
                .add("ace", "./assets/mainCards/aceImage.png")
                .add("king", "./assets/mainCards/kingImage.png")
                .add("queen", "./assets/mainCards/queenImage.png")
                .add("jack", "./assets/mainCards/jackImage.png")
                .add("heldLabel", "./assets/mainCards/held.png")
                .add("winLabel", "./assets/mainCards/win_en.png")
                .add("gambleRed", "./assets/gamble/gambleRed.png")
                .add("gambleWin", "./assets/gamble/gambleWin.png")
                .add("cardBlink", "./assets/commonSounds/cardBlink.mp3")
                .add("cardSwap", "./assets/commonSounds/cardSwap.mp3")
                .add("collectButton", "./assets/commonSounds/collectButton.mp3")
                .add("creditAnimation", "./assets/commonSounds/creditAnimation.mp3")
                .add("gambleCardClick", "./assets/commonSounds/gambleCardClick.mp3")
                .add("gambleOpen", "./assets/commonSounds/gambleOpen.mp3")
                .add("gambleWon", "./assets/commonSounds/gambleWon.mp3")
                .add("holdCard", "./assets/commonSounds/holdCard.mp3")
                .add("mainButton", "./assets/commonSounds/mainButton.mp3")
                .add("takeWin", "./assets/commonSounds/takeWin.mp3")
                .add("volume", "./assets/commonSounds/volume.mp3");
            PIXI.loader.on("complete", this.onLoad.bind(this));
            PIXI.loader.load();
        };
        Resources.prototype.onLoad = function () {
            this.sendNotification(Notifications.RESOURCES_LOADED);
        };
        return Resources;
    }(Pluck.Model));
    model.Resources = Resources;
})(model || (model = {}));
///<reference path="./controllers/GameController.ts"/>
///<reference path="models/Resources.ts"/>
var poker;
(function (poker) {
    var GameController = controllers.GameController;
    var Main = /** @class */ (function () {
        function Main() {
            //  this._res = new Resources();
            //  this._res.load();
            var a = 5;
            var root = new GameController();
            Pluck.ViewController.setRoot(root);
            root.addControllers();
        }
        return Main;
    }());
    poker.Main = Main;
})(poker || (poker = {}));
var views;
(function (views) {
    var BetButton = /** @class */ (function (_super) {
        __extends(BetButton, _super);
        function BetButton(bet) {
            var _this = _super.call(this) || this;
            _this._width = 87;
            _this._inactiveTexture = PIXI.Texture.fromImage("../../bin/assets/button/betButtonInactive.png");
            _this._activeTexture = PIXI.Texture.fromImage("../../bin/assets/button/betButtonActive.png");
            _this._actionLabelFontSize = 15;
            _this._actionLabelY = 52;
            _this._actionLabelDraw = "Draw";
            _this._actionLabelDeal = "Deal";
            _this._actionLabelCollect = "Collect";
            _this._actionLabelMaxBet = "Max Bet";
            _this._betLabelFontSize = 12;
            _this._betLabelY = -1;
            _this._betLabelText = "BET";
            _this._betPriceLabelY = 13;
            _this._betPriceLabelSize = 35;
            _this.texture = _this._inactiveTexture;
            _this._isDown = false;
            _this.buttonMode = true;
            _this.interactive = true;
            _this.on("pointerdown", _this.onClick);
            _this._betPrice = bet;
            _this.setTexts();
            return _this;
        }
        Object.defineProperty(BetButton.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            enumerable: true,
            configurable: true
        });
        BetButton.prototype.selectButton = function () {
            this._isSelected = true;
            this.texture = this._activeTexture;
        };
        BetButton.prototype.deselectButton = function () {
            this._isSelected = false;
            this.texture = this._inactiveTexture;
            this.goUp();
        };
        BetButton.prototype.onClick = function () {
            if (!this._isSelected) {
                this.goDown();
            }
            this.on("pointerup", this.onButtonUp);
            this.on("pointerupoutside", this.onButtonUpOutside);
        };
        BetButton.prototype.onButtonUp = function () {
            if (!this._isSelected && this._isDown) {
                this.emit("buttonSelected", this);
            }
        };
        BetButton.prototype.goDown = function () {
            this.y += 5;
            this._isDown = true;
        };
        BetButton.prototype.goUp = function () {
            this.y -= 5;
            this._isDown = false;
        };
        BetButton.prototype.onButtonUpOutside = function () {
            if (this._isDown && !this._isSelected) {
                this.goUp();
            }
        };
        BetButton.prototype.setTexts = function () {
            this._actionLabel = new PIXI.Text(this._actionLabelDeal, {
                fontSize: this._actionLabelFontSize,
            });
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
            this.addChild(this._actionLabel);
            this._betLabel = new PIXI.Text(this._betLabelText, {
                fontSize: this._betLabelFontSize,
                fontWeight: "bolder",
            });
            this._betLabel.x = (this._width - this._betLabel.width) / 2;
            this._betLabel.y = this._betLabelY;
            this.addChild(this._betLabel);
            this._betPriceLabel = new PIXI.Text(this._betPrice.toString(), {
                fontSize: this._betPriceLabelSize,
                fill: "white",
                align: "center",
            });
            this._betPriceLabel.x = (this._width - this._betPriceLabel.width) / 2;
            this._betPriceLabel.y = this._betPriceLabelY;
            this.addChild(this._betPriceLabel);
        };
        return BetButton;
    }(PIXI.Sprite));
    views.BetButton = BetButton;
})(views || (views = {}));
var views;
(function (views) {
    var Card = /** @class */ (function (_super) {
        __extends(Card, _super);
        function Card() {
            var _this = _super.call(this) || this;
            _this.init();
            _this.texture = _this._backTexture;
            return _this;
        }
        Card.prototype.init = function () {
            this._backTexture = PIXI.Texture.from("./assets/mainCards/cardBackBlack.png");
            this._faceTexture = PIXI.Texture.from("./assets/mainCards/card_clean.png");
            this._heldLabel = PIXI.Sprite.fromImage("./assets/mainCards/held.png");
            this._winLabel = PIXI.Sprite.fromImage("./assets/mainCards/win_en.png");
        };
        Card.prototype.isHeld = function () {
            if (this._heldLabel.texture === PIXI.Texture.from("heldLabel")) {
                return true;
            }
            return false;
        };
        Card.prototype.toFace = function () {
            this.texture = this._faceTexture;
        };
        Card.prototype.toBack = function () {
            this.texture = this._backTexture;
        };
        Card.prototype.hold = function () {
            this.addChild(this._heldLabel);
        };
        Card.prototype.win = function () {
            this.addChild(this._winLabel);
        };
        Card.prototype.release = function () {
            this.removeChild(this._heldLabel);
        };
        return Card;
    }(PIXI.Sprite));
    views.Card = Card;
})(views || (views = {}));
//# sourceMappingURL=Game.min.js.map