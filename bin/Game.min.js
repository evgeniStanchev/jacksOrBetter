var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var poker;
(function (poker) {
    var Notifications = /** @class */ (function () {
        function Notifications() {
        }
        Notifications.RESOURCES_LOADED = "resourcesLoaded";
        Notifications.DRAW_RECEIVED = 'drawReceived';
        Notifications.DEAL_RECEIVED = 'dealReceived';
        return Notifications;
    }());
    poker.Notifications = Notifications;
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var poker;
(function (poker) {
    var view;
    (function (view) {
        var GameView = /** @class */ (function (_super) {
            __extends(GameView, _super);
            function GameView() {
                var _this = _super.call(this) || this;
                var background = PIXI.Sprite.fromImage("./assets/background.png");
                _this.addChild(background);
                return _this;
            }
            return GameView;
        }(PIXI.Container));
        view.GameView = GameView;
    })(view = poker.view || (poker.view = {}));
})(poker || (poker = {}));
var poker;
(function (poker) {
    var model;
    (function (model) {
        var GameModel = /** @class */ (function (_super) {
            __extends(GameModel, _super);
            function GameModel() {
                var _this = _super.call(this) || this;
                _this.balance = 5000;
                return _this;
            }
            return GameModel;
        }(Pluck.Model));
        model.GameModel = GameModel;
    })(model = poker.model || (poker.model = {}));
})(poker || (poker = {}));
var poker;
(function (poker) {
    var views;
    (function (views) {
        var cards;
        (function (cards) {
            var CardsView = /** @class */ (function (_super) {
                __extends(CardsView, _super);
                function CardsView() {
                    var _this = _super.call(this) || this;
                    _this._speed = 1;
                    return _this;
                }
                Object.defineProperty(CardsView.prototype, "cards", {
                    get: function () {
                        return this._cards;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CardsView.prototype, "revealSpeed", {
                    set: function (val) {
                        this._speed = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                CardsView.prototype.revealCards = function () {
                    for (var index = 0; index < this._cards.length; index++) {
                        if (!this._cards[index].isHeld()) {
                            //TODO reveal the card
                        }
                    }
                };
                CardsView.prototype.holdCard = function (index) {
                    this._cards[index].hold();
                };
                CardsView.prototype.releaseCard = function (index) {
                    this._cards[index].release();
                };
                CardsView.prototype.releaseAllCards = function () {
                    this._cards.forEach(function (card) {
                        card.release();
                    });
                };
                return CardsView;
            }(PIXI.Container));
            cards.CardsView = CardsView;
        })(cards = views.cards || (views.cards = {}));
    })(views = poker.views || (poker.views = {}));
})(poker || (poker = {}));
///<reference path="../views/cards/CardsView.ts"/>
var poker;
(function (poker) {
    var controllers;
    (function (controllers) {
        var CardsView = poker.views.cards.CardsView;
        var CardsController = /** @class */ (function (_super) {
            __extends(CardsController, _super);
            function CardsController() {
                return _super.call(this, new CardsView()) || this;
                // for (const card of this.view.cards) {
                //     card.on("click", this.onCardClick, this);
                // }
                // const mModel = this.gameModel;
                // console.log(mModel);
            }
            CardsController.prototype.getInterests = function () {
                return [];
            };
            CardsController.prototype.handleNotification = function (notification) {
                switch (notification.name) {
                    case poker.Notifications.DEAL_RECEIVED: {
                        this.view.revealCards();
                        break;
                    }
                }
            };
            Object.defineProperty(CardsController.prototype, "view", {
                get: function () {
                    return this._view;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CardsController.prototype, "gameModel", {
                get: function () {
                    return Pluck.ViewController.root._model;
                },
                enumerable: true,
                configurable: true
            });
            CardsController.prototype.onCardClick = function (e) {
                //
                var card = e.target;
                if (this.gameModel.balance > 0) {
                    card.hold();
                }
            };
            return CardsController;
        }(Pluck.ViewController));
        controllers.CardsController = CardsController;
    })(controllers = poker.controllers || (poker.controllers = {}));
})(poker || (poker = {}));
///<reference path="../views/GameView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="../controllers/CardsController.ts"/>
var poker;
(function (poker) {
    var controllers;
    (function (controllers) {
        var GameView = poker.view.GameView;
        var Notifications = poker.Notifications;
        var GameModel = poker.model.GameModel;
        var CardsController = poker.controllers.CardsController;
        var GameController = /** @class */ (function (_super) {
            __extends(GameController, _super);
            function GameController() {
                var _this = _super.call(this, new GameView(), new GameModel()) || this;
                _this.init();
                return _this;
            }
            GameController.prototype.init = function () {
                this._app = new PIXI.Application({
                    width: 1280,
                    height: 720,
                });
                this._app.stage.addChild(this._view);
                document.getElementById("display-port").appendChild(this._app.view);
                this._cardsControler = new CardsController();
                this._view.addChild(this._cardsControler.view);
            };
            GameController.prototype.getInterests = function () {
                return [Notifications.RESOURCES_LOADED];
            };
            GameController.prototype.handleNotification = function (note) {
                switch (note.name
                // case Notifications.RESOURCES_LOADED:
                //     this.addControllers();
                //     break;
                ) {
                }
            };
            GameController.prototype.addControllers = function () {
                var cardsController = new CardsController();
                this.addChildViewController(cardsController);
            };
            return GameController;
        }(Pluck.ViewController));
        controllers.GameController = GameController;
    })(controllers = poker.controllers || (poker.controllers = {}));
})(poker || (poker = {}));
var poker;
(function (poker) {
    var model;
    (function (model) {
        var Resources = /** @class */ (function (_super) {
            __extends(Resources, _super);
            function Resources() {
                return _super.call(this) || this;
            }
            Resources.prototype.load = function () {
                PIXI.loader
                    .add("background", "./assets/background.png")
                    .add("sound", "./assets/sound.png")
                    .add("cleanCard", "./assets/mainCards/card_clean.png")
                    .add("cardBackBlack", "./assets/mainCards/cardBackBlack.png")
                    .add("cardBackRed", "./assets/mainCards/cardBackRed.png")
                    .add("clubs", "./assets/mainCards/clubs.png")
                    .add("diamonds", "./assets/mainCards/diamonds.png")
                    .add("hearts", "./assets/mainCards/hearts.png")
                    .add("spades", "./assets/mainCards/spades.png")
                    .add("ace", "./assets/mainCards/aceImage.png")
                    .add("king", "./assets/mainCards/kingImage.png")
                    .add("queen", "./assets/mainCards/queenImage.png")
                    .add("jack", "./assets/mainCards/jackImage.png")
                    .add("heldLabel", "./assets/mainCards/held.png")
                    .add("winLabel", "./assets/mainCards/win_en.png")
                    .add("gambleRed", "./assets/gamble/gambleRed.png")
                    .add("gambleWin", "./assets/gamble/gambleWin.png")
                    .add("cardBlink", "./assets/commonSounds/cardBlink.mp3")
                    .add("cardSwap", "./assets/commonSounds/cardSwap.mp3")
                    .add("collectButton", "./assets/commonSounds/collectButton.mp3")
                    .add("creditAnimation", "./assets/commonSounds/creditAnimation.mp3")
                    .add("gambleCardClick", "./assets/commonSounds/gambleCardClick.mp3")
                    .add("gambleOpen", "./assets/commonSounds/gambleOpen.mp3")
                    .add("gambleWon", "./assets/commonSounds/gambleWon.mp3")
                    .add("holdCard", "./assets/commonSounds/holdCard.mp3")
                    .add("mainButton", "./assets/commonSounds/mainButton.mp3")
                    .add("takeWin", "./assets/commonSounds/takeWin.mp3")
                    .add("volume", "./assets/commonSounds/volume.mp3");
                PIXI.loader.on("complete", this.onLoad.bind(this));
                PIXI.loader.load();
            };
            Resources.prototype.onLoad = function () {
                this.sendNotification(poker.Notifications.RESOURCES_LOADED);
            };
            return Resources;
        }(Pluck.Model));
        model.Resources = Resources;
    })(model = poker.model || (poker.model = {}));
})(poker || (poker = {}));
///<reference path="./controllers/GameController.ts"/>
///<reference path="models/Resources.ts"/>
var poker;
(function (poker) {
    var GameController = poker.controllers.GameController;
    var Main = /** @class */ (function () {
        function Main() {
            //  this._res = new Resources();
            //  this._res.load();
            var a = 5;
            var root = new GameController();
            Pluck.ViewController.setRoot(root);
            root.addControllers();
        }
        return Main;
    }());
    poker.Main = Main;
})(poker || (poker = {}));
var poker;
(function (poker) {
    var views;
    (function (views) {
        var cards;
        (function (cards) {
            var Card = /** @class */ (function (_super) {
                __extends(Card, _super);
                function Card() {
                    var _this = _super.call(this) || this;
                    _this.init();
                    return _this;
                }
                Card.prototype.init = function () {
                    this._backTexture = PIXI.Texture.from("./assets/mainCards/cardBackBlack.png");
                    this._faceTexture = PIXI.Texture.from("./assets/mainCards/card_clean.png");
                    this._heldLabel = PIXI.Sprite.fromImage("./assets/mainCards/held.png");
                    this._winLabel = PIXI.Sprite.fromImage("./assets/mainCards/win_en.png");
                };
                Card.prototype.isHeld = function () {
                    if (this._heldLabel.texture === PIXI.Texture.from("heldLabel")) {
                        return true;
                    }
                    return false;
                };
                Card.prototype.toFace = function () {
                    this.texture = this._faceTexture;
                };
                Card.prototype.toBack = function () {
                    this.texture = this._backTexture;
                };
                Card.prototype.hold = function () {
                    this.addChild(this._heldLabel);
                };
                Card.prototype.win = function () {
                    this.addChild(this._winLabel);
                };
                Card.prototype.release = function () {
                    this.removeChild(this._heldLabel);
                };
                return Card;
            }(PIXI.Sprite));
            cards.Card = Card;
        })(cards = views.cards || (views.cards = {}));
    })(views = poker.views || (poker.views = {}));
})(poker || (poker = {}));
//# sourceMappingURL=Game.min.js.map