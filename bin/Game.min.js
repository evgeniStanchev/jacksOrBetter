var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var poker;
(function (poker) {
    var Notifications = /** @class */ (function () {
        function Notifications() {
        }
        Notifications.RESOURCES_LOADED = "resourcesLoaded";
        Notifications.BUTTON_CLICK_DRAW = "draw button clicked";
        Notifications.BUTTON_CLICK_DEAL = "deal button clicked";
        Notifications.BUTTON_CLICK_COLLECT = "collect button clicked";
        Notifications.PLAYER_WON = "player won";
        Notifications.PLAYER_LOST = "player lost";
        Notifications.DEAL_SUCCESSFUL = "dealSuccess";
        Notifications.CURRENCY_CHANGED = "currencyChanged";
        Notifications.BALANCE_UPDATED = "balance is updated";
        Notifications.SPIN_ENDED = "current spin ended";
        return Notifications;
    }());
    poker.Notifications = Notifications;
})(poker || (poker = {}));
///<reference path="../Notifications.ts"/>
var views;
(function (views) {
    var GameView = /** @class */ (function (_super) {
        __extends(GameView, _super);
        function GameView() {
            var _this = _super.call(this) || this;
            _this.addChild(PIXI.Sprite.from("background"));
            return _this;
        }
        return GameView;
    }(PIXI.Container));
    views.GameView = GameView;
})(views || (views = {}));
///<reference path="../Main.ts"/>
///<reference path="../Notifications.ts"/>
var model;
(function (model) {
    var Notification = poker.Notifications;
    var GameModel = /** @class */ (function (_super) {
        __extends(GameModel, _super);
        function GameModel() {
            return _super.call(this) || this;
        }
        Object.defineProperty(GameModel.prototype, "facade", {
            get: function () {
                return this._facade;
            },
            set: function (v) {
                this._facade = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "balance", {
            get: function () {
                return this._balance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "cards", {
            get: function () {
                return this._cards;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameModel.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        GameModel.prototype.changeCurrency = function () {
            this._isShowingCredits = !this._isShowingCredits;
            this.sendNotification(Notification.CURRENCY_CHANGED);
        };
        Object.defineProperty(GameModel.prototype, "data", {
            set: function (val) {
                this._balance = val.amount;
                // this._cards = val.cards;
                switch (val.action) {
                    case "Deal": {
                        this.sendNotification(Notification.DEAL_SUCCESSFUL);
                        break;
                    }
                    case "setBalance": {
                        this.sendNotification(Notification.BALANCE_UPDATED);
                        break;
                    }
                    case "end the game": {
                        this.sendNotification(Notification.SPIN_ENDED);
                        break;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        return GameModel;
    }(Pluck.Model));
    model.GameModel = GameModel;
})(model || (model = {}));
///<reference path="../types/rank.ts"/>
///<reference path="../types/suit.ts"/>
var views;
(function (views) {
    var CardsView = /** @class */ (function (_super) {
        __extends(CardsView, _super);
        function CardsView() {
            var _this = _super.call(this) || this;
            _this._x = 90;
            _this._y = 335;
            _this._speed = 1;
            _this._cards = [];
            _this.createNewCards();
            return _this;
        }
        Object.defineProperty(CardsView.prototype, "cards", {
            get: function () {
                return this._cards;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsView.prototype, "revealSpeed", {
            set: function (val) {
                this._speed = val;
            },
            enumerable: true,
            configurable: true
        });
        CardsView.prototype.revealCards = function () {
            var _loop_1 = function (card) {
                if (!card.isHeld) {
                    setTimeout(function () {
                        card.reveal();
                    }, 100 * this_1.cards.indexOf(card));
                }
            };
            var this_1 = this;
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                _loop_1(card);
            }
        };
        CardsView.prototype.hideCards = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                if (!card.isHeld) {
                    card.hide();
                }
            }
        };
        CardsView.prototype.startInteractivity = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                card.interactive = true;
            }
        };
        CardsView.prototype.stopInteractivity = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                card.interactive = false;
            }
        };
        CardsView.prototype.holdCard = function (index) {
            this._cards[index].hold();
        };
        CardsView.prototype.releaseCard = function (index) {
            this._cards[index].release();
        };
        CardsView.prototype.releaseAllCards = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                card.release();
            }
        };
        CardsView.prototype.setNewRanksAndSuits = function () {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var card = _a[_i];
                if (!card.isHeld) {
                    do {
                        card.setSuitAndRank(this.getRandomRank(), this.getRandomSuit());
                    } while (this.cardExists(card));
                }
            }
        };
        CardsView.prototype.createNewCards = function () {
            for (var index = 0; index < CardsView.COUNT; index++) {
                var newCard = new views.Card();
                newCard.x = this._x;
                newCard.x += index * (newCard.width + CardsView.DISTANCE_BETWEEN);
                newCard.y = this._y;
                newCard.buttonMode = true;
                this._cards.push(newCard);
                this.addChild(newCard);
            }
        };
        CardsView.prototype.cardExists = function (card) {
            for (var _i = 0, _a = this._cards; _i < _a.length; _i++) {
                var currentCard = _a[_i];
                if (currentCard.rank == card.rank && currentCard.suit == card.suit && currentCard != card) {
                    return true;
                }
            }
            return false;
        };
        //TODO alternative
        CardsView.prototype.getRandomRank = function () {
            var num = Math.floor((Math.random() * 20) % 13) + 2;
            switch (num) {
                case 2: {
                    return "2";
                }
                case 3: {
                    return "3";
                }
                case 4: {
                    return "4";
                }
                case 5: {
                    return "5";
                }
                case 6: {
                    return "6";
                }
                case 7: {
                    return "7";
                }
                case 8: {
                    return "8";
                }
                case 9: {
                    return "9";
                }
                case 10: {
                    return "10";
                }
                case 11: {
                    return "J";
                }
                case 12: {
                    return "Q";
                }
                case 13: {
                    return "K";
                }
                case 14: {
                    return "A";
                }
            }
        };
        //TODO alternative
        CardsView.prototype.getRandomSuit = function () {
            var num = Math.floor(Math.random() * 10) % 4;
            switch (num) {
                case 0: {
                    return "C";
                }
                case 1: {
                    return "D";
                }
                case 2: {
                    return "H";
                }
                case 3: {
                    return "S";
                }
            }
        };
        CardsView.COUNT = 5;
        CardsView.DISTANCE_BETWEEN = 10;
        return CardsView;
    }(PIXI.Container));
    views.CardsView = CardsView;
})(views || (views = {}));
///<reference path="../views/CardsView.ts"/>
///<reference path="../Notifications.ts"/>
var controllers;
(function (controllers) {
    var CardsView = views.CardsView;
    var Notification = poker.Notifications;
    var CardsController = /** @class */ (function (_super) {
        __extends(CardsController, _super);
        function CardsController() {
            return _super.call(this, new CardsView()) || this;
            // for (const card of this.view.cards) {
            //     card.on("click", this.onCardClick, this);
            // }
            // const mModel = this.gameModel;
            // console.log(mModel);
        }
        CardsController.prototype.getInterests = function () {
            return [
                Notification.BUTTON_CLICK_DEAL,
                Notification.BUTTON_CLICK_DRAW,
                Notification.BUTTON_CLICK_COLLECT,
                Notification.DEAL_SUCCESSFUL,
            ];
        };
        CardsController.prototype.handleNotification = function (notification) {
            console.log("Notification received: " + notification.name);
            switch (notification.name) {
                case Notification.DEAL_SUCCESSFUL: {
                    this.view.hideCards();
                    this.view.setNewRanksAndSuits();
                    this.view.revealCards();
                    this.view.startInteractivity();
                    break;
                }
                case Notification.BUTTON_CLICK_DRAW: {
                    this.view.hideCards();
                    this.view.setNewRanksAndSuits();
                    this.view.revealCards();
                    this.view.stopInteractivity();
                    this.view.releaseAllCards();
                    if (true) {
                        this.gameModel.facade.endTheSpin();
                    }
                    else {
                        //
                    }
                    break;
                }
            }
        };
        Object.defineProperty(CardsController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        CardsController.prototype.onCardClick = function (e) {
            //
            var card = e.target;
            this.gameModel.facade.requestDeal(200);
            if (this.gameModel.balance > 0) {
                card.hold();
            }
        };
        return CardsController;
    }(Pluck.ViewController));
    controllers.CardsController = CardsController;
})(controllers || (controllers = {}));
///<reference path="../types/listening.ts"/>
///<reference path="../types/action.ts"/>
var views;
(function (views) {
    var BetButtonsView = /** @class */ (function (_super) {
        __extends(BetButtonsView, _super);
        function BetButtonsView(bets) {
            var _this = _super.call(this) || this;
            _this._actionLabelDeal = "Deal";
            _this._actionLabelMaxBet = "Max Bet";
            _this._buttonsY = 610;
            _this._buttons = [];
            _this._bets = bets;
            _this.init();
            _this.buttonsInteractive = true;
            return _this;
        }
        Object.defineProperty(BetButtonsView.prototype, "buttons", {
            get: function () {
                return this._buttons;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButtonsView.prototype, "buttonsInteractive", {
            set: function (v) {
                for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                    var button = _a[_i];
                    button.interactive = v;
                }
            },
            enumerable: true,
            configurable: true
        });
        BetButtonsView.prototype.init = function () {
            for (var i = 0; i < BetButtonsView.COUNT; i++) {
                this.createButton(i);
            }
        };
        BetButtonsView.prototype.createButton = function (index) {
            var isMaxBet = index == BetButtonsView.COUNT - 1;
            var button = new views.BetButton(this._bets[index], index, this._actionLabelDeal, isMaxBet);
            if (button.isMaxBet) {
                button.actionLabelText = this._actionLabelMaxBet;
            }
            button.x = 270 + index * (BetButtonsView.DISTANCE_BETWEEN + BetButtonsView.BUTTON_WIDTH);
            button.y = this._buttonsY;
            this._buttons.push(button);
            this.addChild(button);
        };
        BetButtonsView.COUNT = 5;
        BetButtonsView.BUTTON_WIDTH = 86;
        BetButtonsView.DISTANCE_BETWEEN = 10;
        return BetButtonsView;
    }(PIXI.Container));
    views.BetButtonsView = BetButtonsView;
})(views || (views = {}));
var views;
(function (views) {
    var BetButton = /** @class */ (function (_super) {
        __extends(BetButton, _super);
        function BetButton(betValue, index, actionLabel, isMaxBet) {
            var _this = _super.call(this) || this;
            _this._width = 87;
            _this._inactiveTexture = PIXI.Texture.from("buttonInactive");
            _this._activeTexture = PIXI.Texture.from("buttonActive");
            _this._actionLabelFontSize = 15;
            _this._actionLabelY = 52;
            _this._betLabelFontSize = 12;
            _this._betLabelY = -1;
            _this._betLabelText = "BET";
            _this._betValueLabelY = 13;
            _this._betValueLabelSize = 35;
            _this.texture = _this._inactiveTexture;
            _this.buttonMode = true;
            _this.on("pointerdown", _this.onPointerDown);
            _this.on("pointerup", _this.onPointerUp);
            _this.on("pointerupoutside", _this.onPointerUpOutside);
            _this._index = index;
            _this._betValue = betValue;
            _this._isDown = false;
            _this._isMaxBet = isMaxBet;
            _this._actionLabelText = actionLabel;
            _this.setTexts();
            return _this;
        }
        Object.defineProperty(BetButton.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "betValue", {
            get: function () {
                return this._betValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "actionLabelText", {
            set: function (text) {
                this._actionLabel.text = text;
                this.resetCoordinates();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BetButton.prototype, "isMaxBet", {
            get: function () {
                return this._isMaxBet;
            },
            enumerable: true,
            configurable: true
        });
        BetButton.prototype.selectButton = function () {
            this._isSelected = true;
            this.texture = this._activeTexture;
        };
        BetButton.prototype.deselectButton = function () {
            this._isSelected = false;
            this.texture = this._inactiveTexture;
        };
        BetButton.prototype.resetCoordinates = function () {
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
        };
        BetButton.prototype.onPointerUp = function (e) {
            if (this._isDown) {
                this.goUp();
                this.emit("buttonSelected", this._index);
            }
        };
        BetButton.prototype.onPointerUpOutside = function (e) {
            if (this._isDown) {
                this.goUp();
            }
        };
        BetButton.prototype.onPointerDown = function (e) {
            this.goDown();
        };
        BetButton.prototype.goDown = function () {
            this.y += 5;
            this._isDown = true;
        };
        BetButton.prototype.goUp = function () {
            this.y -= 5;
            this._isDown = false;
        };
        BetButton.prototype.setTexts = function () {
            this._actionLabel = new PIXI.Text(this._actionLabelText, {
                fontSize: this._actionLabelFontSize,
            });
            this._actionLabel.x = (this._width - this._actionLabel.width) / 2;
            this._actionLabel.y = this._actionLabelY;
            this.addChild(this._actionLabel);
            this._betLabel = new PIXI.Text(this._betLabelText, {
                fontSize: this._betLabelFontSize,
                fontWeight: "bolder",
            });
            this._betLabel.x = (this._width - this._betLabel.width) / 2;
            this._betLabel.y = this._betLabelY;
            this.addChild(this._betLabel);
            this._betValueLabel = new PIXI.Text(this._betValue.toString(), {
                fontSize: this._betValueLabelSize,
                fill: "white",
                align: "center",
            });
            this._betValueLabel.x = (this._width - this._betValueLabel.width) / 2;
            this._betValueLabel.y = this._betValueLabelY;
            this.addChild(this._betValueLabel);
        };
        return BetButton;
    }(PIXI.Sprite));
    views.BetButton = BetButton;
})(views || (views = {}));
///<reference path="../views/BetButtonsView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../views/BetButton.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="../types/action.ts"/>
///<reference path="../types/listening.ts"/>
///<reference path="../types/state.ts"/>
var controllers;
(function (controllers) {
    var Notification = poker.Notifications;
    var BetButtonsView = views.BetButtonsView;
    var ButtonsController = /** @class */ (function (_super) {
        __extends(ButtonsController, _super);
        function ButtonsController() {
            var _this = _super.call(this, new BetButtonsView([1, 2, 3, 5, 10])) || this;
            _this._currentAction = "deal clicked";
            _this.listening("on");
            return _this;
        }
        Object.defineProperty(ButtonsController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonsController.prototype, "gameModel", {
            get: function () {
                return Pluck.ViewController.root._model;
            },
            enumerable: true,
            configurable: true
        });
        ButtonsController.prototype.getInterests = function () {
            return [Notification.DEAL_SUCCESSFUL, Notification.SPIN_ENDED];
        };
        ButtonsController.prototype.handleNotification = function (notification) {
            switch (notification.name) {
                case Notification.DEAL_SUCCESSFUL: {
                    console.log("Deal ? ");
                    this._currentAction = "draw clicked";
                    this.updateActionLabel("Draw");
                    // this._view.
                    break;
                }
                case Notification.SPIN_ENDED: {
                    this._currentAction = "deal clicked";
                    this.updateActionLabel("Deal");
                    break;
                }
            }
        };
        ButtonsController.prototype.onButtonClicked = function (e) {
            var selectedButton = e.target;
            switch (this._currentAction) {
                case "deal clicked": {
                    this.gameModel.facade.requestDeal(selectedButton.betValue);
                    this.sendNotification(Notification.BUTTON_CLICK_DEAL);
                    break;
                }
                case "draw clicked": {
                    this.sendNotification(Notification.BUTTON_CLICK_DRAW);
                    break;
                }
                case "collect clicked": {
                    this.sendNotification(Notification.BUTTON_CLICK_COLLECT);
                    break;
                }
            }
        };
        ButtonsController.prototype.listening = function (method) {
            for (var _i = 0, _a = this._view.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                button[method]("buttonSelected", this.selectButton, this);
                button[method]("click", this.onButtonClicked, this);
            }
        };
        ButtonsController.prototype.selectButton = function (buttonIndex) {
            for (var _i = 0, _a = this._view.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                if (this._view.buttons.indexOf(button) == buttonIndex) {
                    button.selectButton();
                }
                else {
                    if (button.isSelected) {
                        button.deselectButton();
                    }
                }
            }
        };
        ButtonsController.prototype.updateActionLabel = function (newLabel) {
            for (var _i = 0, _a = this._view.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                if (!button.isMaxBet) {
                    button.actionLabelText = newLabel;
                }
            }
        };
        return ButtonsController;
    }(Pluck.ViewController));
    controllers.ButtonsController = ButtonsController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var BalanceView = /** @class */ (function (_super) {
        __extends(BalanceView, _super);
        function BalanceView(balanceAmount) {
            var _this = _super.call(this) || this;
            _this._x = 100;
            _this._y = 575;
            _this._width = 160;
            _this._height = 55;
            _this._radius = 16;
            _this._balanceAmount = balanceAmount;
            _this.drawFigure();
            _this._balanceLabel = new PIXI.Text("BALANCE", {
                fill: 0x015d8a,
                fontSize: 13,
                fontWeight: "bolder",
            });
            _this.insertTexts();
            return _this;
        }
        BalanceView.prototype.insertTexts = function () {
            this._balanceLabel.x = this._x + (this._width - this._balanceLabel.width) / 2;
            this._balanceLabel.y = this._y - 5;
            this.addChild(this._balanceLabel);
            this._balanceAmountText = new PIXI.Text(this._balanceAmount.toString(), {
                fill: 0xffffff,
                fontSize: 30,
                fontWeight: "bolder",
            });
            this._balanceAmountText.x = this._x + (this._width - this._balanceAmountText.width) / 2;
            this._balanceAmountText.y = this._y + (this._height - this._balanceAmountText.height) / 2;
            this.addChild(this._balanceAmountText);
        };
        BalanceView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        BalanceView.prototype.changeBalance = function (balance) {
            this._balanceAmount = balance;
            this._balanceAmountText.text = this._balanceAmount.toString();
        };
        return BalanceView;
    }(PIXI.Graphics));
    views.BalanceView = BalanceView;
})(views || (views = {}));
///<reference path="../views/BalanceView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
var controllers;
(function (controllers) {
    var BalanceView = views.BalanceView;
    var Notification = poker.Notifications;
    var BalanceController = /** @class */ (function (_super) {
        __extends(BalanceController, _super);
        function BalanceController(mModel) {
            var _this = 
            //TODO balance must be received from server
            _super.call(this, new BalanceView(300)) || this;
            _this._mModel = mModel;
            return _this;
        }
        BalanceController.prototype.getInterests = function () {
            return [Notification.BALANCE_UPDATED, Notification.DEAL_SUCCESSFUL];
        };
        BalanceController.prototype.handleNotification = function (notification) {
            switch (notification.name) {
                case Notification.BALANCE_UPDATED: {
                    this._view.changeBalance(this._mModel.balance);
                    break;
                }
                case Notification.DEAL_SUCCESSFUL: {
                    this._view.changeBalance(this._mModel.balance);
                    break;
                }
            }
        };
        return BalanceController;
    }(Pluck.ViewController));
    controllers.BalanceController = BalanceController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var WinView = /** @class */ (function (_super) {
        __extends(WinView, _super);
        function WinView() {
            var _this = _super.call(this) || this;
            _this._x = 750;
            _this._y = 575;
            _this._width = 220;
            _this._height = 100;
            _this._radius = 16;
            _this.drawFigure();
            return _this;
        }
        WinView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        return WinView;
    }(PIXI.Graphics));
    views.WinView = WinView;
})(views || (views = {}));
///<reference path="../views/WinView.ts"/>
var controllers;
(function (controllers) {
    var WinView = views.WinView;
    var WinController = /** @class */ (function (_super) {
        __extends(WinController, _super);
        function WinController() {
            return _super.call(this, new WinView()) || this;
        }
        return WinController;
    }(Pluck.ViewController));
    controllers.WinController = WinController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var GambleButtonView = /** @class */ (function (_super) {
        __extends(GambleButtonView, _super);
        function GambleButtonView() {
            var _this = _super.call(this) || this;
            _this._x = 780;
            _this._y = 645;
            _this._width = 160;
            _this._height = 30;
            _this._radius = 16;
            _this._lastWinText = "LAST WIN";
            _this._gambleText = "GAMBLE";
            _this.drawFigure();
            _this.setTexts();
            return _this;
        }
        GambleButtonView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        GambleButtonView.prototype.setTexts = function () {
            this._label = new PIXI.Text(this._lastWinText, {
                fontSize: 15,
                fill: 0x014d8a,
                fontWeight: "bolder",
            });
            this._label.x = this._x + (this._width - this._label.width) / 2;
            this._label.y = this._y + (this._height - this._label.height) / 2;
            this.addChild(this._label);
        };
        return GambleButtonView;
    }(PIXI.Graphics));
    views.GambleButtonView = GambleButtonView;
})(views || (views = {}));
///<reference path="../views/GambleButtonView.ts"/>
var controllers;
(function (controllers) {
    var GambleButtonView = views.GambleButtonView;
    var GambleButtonController = /** @class */ (function (_super) {
        __extends(GambleButtonController, _super);
        function GambleButtonController() {
            return _super.call(this, new GambleButtonView()) || this;
        }
        return GambleButtonController;
    }(Pluck.ViewController));
    controllers.GambleButtonController = GambleButtonController;
})(controllers || (controllers = {}));
var views;
(function (views) {
    var InfoView = /** @class */ (function (_super) {
        __extends(InfoView, _super);
        function InfoView() {
            var _this = _super.call(this) || this;
            _this._x = 275;
            _this._y = 575;
            _this._width = 465;
            _this._height = 30;
            _this._radius = 10;
            _this.drawFigure();
            _this.setTexts();
            return _this;
        }
        InfoView.prototype.setTexts = function () {
            this._actionText = new PIXI.Text("PRESS DEAL TO RUN NEW GAME", {
                fontSize: 15,
                fontWeight: "bolder",
                fill: 0xFFFFFF
            });
            this._actionText.x = this._x + (this._width - this._actionText.width) / 2;
            this._actionText.y = this._y + (this._height - this._actionText.height) / 2;
            this.addChild(this._actionText);
        };
        InfoView.prototype.drawFigure = function () {
            this.lineStyle(2, 0x014d8a);
            this.beginFill(0x000000);
            this.drawRoundedRect(this._x, this._y, this._width, this._height, this._radius);
            this.endFill();
        };
        return InfoView;
    }(PIXI.Graphics));
    views.InfoView = InfoView;
})(views || (views = {}));
///<reference path="../views/InfoView.ts"/>
var controllers;
(function (controllers) {
    var InfoView = views.InfoView;
    var InfoController = /** @class */ (function (_super) {
        __extends(InfoController, _super);
        function InfoController() {
            //TODO balance must be received from server
            return _super.call(this, new InfoView()) || this;
        }
        return InfoController;
    }(Pluck.ViewController));
    controllers.InfoController = InfoController;
})(controllers || (controllers = {}));
///<reference path="../views/GameView.ts"/>
///<reference path="../Notifications.ts"/>
///<reference path="../models/GameModel.ts"/>
///<reference path="./CardsController.ts"/>
///<reference path="./ButtonsController.ts"/>
///<reference path="./BalanceController.ts"/>
///<reference path="./WinController.ts"/>
///<reference path="./GambleButtonController.ts"/>
///<reference path="./InfoController.ts"/>
///<reference path="../Main.ts"/>
var controllers;
(function (controllers) {
    var GameView = views.GameView;
    var Notifications = poker.Notifications;
    var GameModel = model.GameModel;
    var WinController = controllers.WinController;
    var InfoController = controllers.InfoController;
    var GambleButtonController = controllers.GambleButtonController;
    var CardsController = controllers.CardsController;
    var ButtonsController = controllers.ButtonsController;
    var BalanceController = controllers.BalanceController;
    var GameController = /** @class */ (function (_super) {
        __extends(GameController, _super);
        function GameController(facade) {
            var _this = _super.call(this, new GameView(), new GameModel()) || this;
            _this.mModel.facade = facade;
            _this.init();
            return _this;
        }
        Object.defineProperty(GameController.prototype, "data", {
            set: function (val) {
                this.mModel.data = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameController.prototype, "mModel", {
            get: function () {
                return this._model;
            },
            enumerable: true,
            configurable: true
        });
        GameController.prototype.init = function () {
            this._app = new PIXI.Application({
                width: 1280,
                height: 720,
            });
            this._app.stage.addChild(this._view);
            document.getElementById("display-port").appendChild(this._app.view);
        };
        GameController.prototype.getInterests = function () {
            return [Notifications.BUTTON_CLICK_DEAL];
        };
        GameController.prototype.handleNotification = function (note) {
            switch (note.name) {
                case Notifications.BUTTON_CLICK_DEAL: {
                }
            }
        };
        GameController.prototype.addControllers = function () {
            this._cardsController = new CardsController();
            this.addChildViewController(this._cardsController);
            this._buttonsController = new ButtonsController();
            this.addChildViewController(this._buttonsController);
            this._balanceController = new BalanceController(this.mModel);
            this.addChildViewController(this._balanceController);
            this._winController = new WinController();
            this.addChildViewController(this._winController);
            this._gambleButtonController = new GambleButtonController();
            this.addChildViewController(this._gambleButtonController);
            this._infoController = new InfoController();
            this.addChildViewController(this._infoController);
        };
        GameController.WIDTH = 1280;
        GameController.HEIGHT = 720;
        return GameController;
    }(Pluck.ViewController));
    controllers.GameController = GameController;
})(controllers || (controllers = {}));
///<reference path="../Notifications.ts"/>
var model;
(function (model) {
    var Notifications = poker.Notifications;
    var Resources = /** @class */ (function (_super) {
        __extends(Resources, _super);
        function Resources() {
            return _super.call(this) || this;
        }
        Resources.prototype.load = function () {
            PIXI.loader
                .add("background", "./../../bin/assets/background.png")
                .add("sound", "./assets/sound.png")
                .add("cleanCard", "./assets/mainCards/card_clean.png")
                .add("cardBackBlack", "./assets/mainCards/cardBackBlack.png")
                .add("cardBackRed", "./assets/mainCards/cardBackRed.png")
                .add("clubs", "./assets/mainCards/clubs.png")
                .add("diamonds", "./assets/mainCards/diamonds.png")
                .add("hearts", "./assets/mainCards/hearts.png")
                .add("spades", "./assets/mainCards/spades.png")
                .add("ace", "./assets/mainCards/aceImage.png")
                .add("king", "./assets/mainCards/kingImage.png")
                .add("queen", "./assets/mainCards/queenImage.png")
                .add("jack", "./assets/mainCards/jackImage.png")
                .add("heldLabel", "./assets/mainCards/held.png")
                .add("winLabel", "./assets/mainCards/win_en.png")
                .add("gambleRed", "./assets/gamble/gambleRed.png")
                .add("gambleWin", "./assets/gamble/gambleWin.png")
                .add("buttonInactive", "./assets/button/betButtonInactive.png")
                .add("buttonActive", "./assets/button/betButtonActive.png")
                .add("cardBlink", "./assets/commonSounds/cardBlink.mp3")
                .add("cardSwap", "./assets/commonSounds/cardSwap.mp3")
                .add("collectButton", "./assets/commonSounds/collectButton.mp3")
                .add("creditAnimation", "./assets/commonSounds/creditAnimation.mp3")
                .add("gambleCardClick", "./assets/commonSounds/gambleCardClick.mp3")
                .add("gambleOpen", "./assets/commonSounds/gambleOpen.mp3")
                .add("gambleWon", "./assets/commonSounds/gambleWon.mp3")
                .add("holdCard", "./assets/commonSounds/holdCard.mp3")
                .add("mainButton", "./assets/commonSounds/mainButton.mp3")
                .add("takeWin", "./assets/commonSounds/takeWin.mp3")
                .add("volume", "./assets/commonSounds/volume.mp3");
            PIXI.loader.on("complete", this.onLoad.bind(this));
            PIXI.loader.load();
        };
        Resources.prototype.onLoad = function () {
            this.emit(Notifications.RESOURCES_LOADED);
        };
        return Resources;
    }(PIXI.utils.EventEmitter));
    model.Resources = Resources;
})(model || (model = {}));
///<reference path="./controllers/GameController.ts"/>
///<reference path="models/Resources.ts"/>
///<reference path="Notifications.ts"/>
var poker;
(function (poker) {
    var GameController = controllers.GameController;
    var Resources = model.Resources;
    var Notification = poker.Notifications;
    var Main = /** @class */ (function (_super) {
        __extends(Main, _super);
        function Main() {
            var _this = _super.call(this) || this;
            _this._requestDeal = "requestDeal";
            _this._requestCollect = "requestCollect";
            _this._endTheSpin = "endTheSpin";
            _this._res = new Resources();
            _this._res.load();
            _this._res.on(Notification.RESOURCES_LOADED, _this.onResourcesLoaded, _this);
            return _this;
        }
        Object.defineProperty(Main.prototype, "data", {
            set: function (val) {
                this._rootController.data = val;
            },
            enumerable: true,
            configurable: true
        });
        Main.prototype.onResourcesLoaded = function () {
            this._rootController = new GameController(this);
            Pluck.ViewController.setRoot(this._rootController);
            this._rootController.addControllers();
            this.emit("resources loaded");
        };
        Main.prototype.requestDeal = function (bet) {
            this.emit(this._requestDeal, {
                bet: bet,
            });
        };
        Main.prototype.endTheSpin = function () {
            this.emit(this._endTheSpin);
        };
        Main.prototype.requestCollect = function (amount) {
            this.emit(this._requestCollect, {
                amount: amount,
            });
        };
        return Main;
    }(PIXI.utils.EventEmitter));
    poker.Main = Main;
})(poker || (poker = {}));
///<reference path="../types/state.ts"/>
///<reference path="../Main.ts"/>
var server;
(function (server) {
    var Server = /** @class */ (function () {
        function Server(facade, balance) {
            this._requestDeal = "requestDeal";
            this._requestCollect = "requestCollect";
            this._endTheSpin = "endTheSpin";
            this._resourceLoaded = "resources loaded";
            this._balance = balance;
            this._facade = facade;
            this._state = "Deal";
            this._facade.on(this._requestDeal, this.requestDeal, this);
            this._facade.on(this._requestCollect, this.requestCollect, this);
            this._facade.on(this._endTheSpin, this.endTheSpin, this);
            this._facade.on(this._resourceLoaded, this.setBalance, this);
        }
        Server.prototype.endTheSpin = function () {
            if (this._state == "Draw" || this._state == "Collect") {
                this._facade.data = {
                    action: "end the game",
                    amount: 0,
                };
                this.changeState("Deal");
            }
            else {
                console.error("You must be in Collect or Draw state");
            }
        };
        Server.prototype.requestDeal = function (request) {
            if (this._state == "Deal") {
                if (this._balance >= request.bet) {
                    this._balance -= request.bet;
                    this._facade.data = {
                        action: this._state,
                        amount: this._balance,
                    };
                    this.changeState("Draw");
                    console.log("Deal was successfull.");
                }
                else {
                    console.error("You dont have enough balance");
                }
            }
            else {
                console.error("To Deal You must be in Deal state. Your state now is " + this._state);
            }
        };
        Server.prototype.setBalance = function () {
            var data = {
                action: "setBalance",
                amount: this._balance,
            };
            this._facade.data = data;
        };
        Server.prototype.changeState = function (newState) {
            this._state = newState;
        };
        Server.prototype.requestCollect = function (amount) {
            if (this._state == "Collect") {
                this._balance += amount;
                this._state = "Collect";
                console.log("Collecting ended successfully");
            }
            else {
                console.error("To Collect You must be in Collect state. Your state now is " + this._state);
            }
        };
        return Server;
    }());
    server.Server = Server;
})(server || (server = {}));
///<reference path="../types/rank.ts"/>
///<reference path="../types/suit.ts"/>
var views;
(function (views) {
    var Card = /** @class */ (function (_super) {
        __extends(Card, _super);
        function Card() {
            var _this = _super.call(this) || this;
            _this._suitLabelSize = 55;
            _this._specificSpriteX = 70;
            _this._specificSpriteY = 10;
            _this._red = 0xff0000;
            _this._black = 0x000000;
            _this.init();
            _this.texture = _this._backTexture;
            _this.on("pointerdown", _this.onClick);
            return _this;
        }
        Card.prototype.setSuitAndRank = function (rank, suit) {
            this._rank = rank;
            this._suit = suit;
            this.addSuitAndRank();
        };
        Object.defineProperty(Card.prototype, "rank", {
            get: function () {
                return this._rank;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Card.prototype, "suit", {
            get: function () {
                return this._suit;
            },
            enumerable: true,
            configurable: true
        });
        Card.prototype.init = function () {
            this._backTexture = PIXI.Texture.from("cardBackBlack");
            this._faceTexture = PIXI.Texture.from("cleanCard");
            this._heldLabel = PIXI.Sprite.from("heldLabel");
            this._heldLabel.x = (this._faceTexture.width - this._heldLabel.width) / 2 + 5;
            this._heldLabel.y = 5;
            this._winLabel = PIXI.Sprite.from("winLabel");
            this._winLabel.x = (this._faceTexture.width - this._winLabel.width) / 2 + 5;
            this._winLabel.y = 5;
            this._isHeld = false;
        };
        Card.prototype.addSuitAndRank = function () {
            this._suitLabel = this.getSuitSprite(this._suit);
            if (this._suit == "D" || this._suit == "H") {
                this._rankLabel = new PIXI.Text(this._rank, {
                    fontSize: this._suitLabelSize,
                    fontWeight: "bolder",
                    fill: this._red,
                });
            }
            else {
                this._rankLabel = new PIXI.Text(this._rank, {
                    fontSize: this._suitLabelSize,
                    fontWeight: "bolder",
                    fill: this._black,
                });
            }
            this._rankLabel.x = 30 - 8 * this._rankLabel.text.length;
            this._rankLabel.y = 3;
            this.addSpecificSprite();
        };
        Card.prototype.onClick = function () {
            if (!this.isHeld) {
                this.hold();
            }
            else {
                this.release();
            }
        };
        Card.prototype.addSpecificSprite = function () {
            if (!Number(this._rank)) {
                switch (this._rank) {
                    case "J": {
                        this._specificSprite = PIXI.Sprite.from("jack");
                        break;
                    }
                    case "Q": {
                        this._specificSprite = PIXI.Sprite.from("queen");
                        break;
                    }
                    case "K": {
                        this._specificSprite = PIXI.Sprite.from("king");
                        break;
                    }
                    case "A": {
                        this._specificSprite = PIXI.Sprite.from("ace");
                        break;
                    }
                }
                this._specificSprite.x = this._specificSpriteX;
                this._specificSprite.y = this._specificSpriteY;
            }
        };
        Object.defineProperty(Card.prototype, "isHeld", {
            get: function () {
                return this._isHeld;
            },
            enumerable: true,
            configurable: true
        });
        Card.prototype.reveal = function () {
            if (!this._isHeld) {
                this.texture = this._faceTexture;
                this.addChild(this._suitLabel);
                this.addChild(this._rankLabel);
                if (this._specificSprite) {
                    this.addChild(this._specificSprite);
                }
            }
        };
        Card.prototype.hide = function () {
            this._specificSprite = null;
            this.removeChildren();
            this.texture = this._backTexture;
        };
        Card.prototype.hold = function () {
            this._isHeld = true;
            this.addChild(this._heldLabel);
        };
        Card.prototype.win = function () {
            this.addChild(this._winLabel);
        };
        Card.prototype.release = function () {
            this._isHeld = false;
            this.removeChild(this._heldLabel);
        };
        Card.prototype.getSuitSprite = function (suit) {
            switch (suit) {
                case "C": {
                    return PIXI.Sprite.from("clubs");
                }
                case "D": {
                    return PIXI.Sprite.from("diamonds");
                }
                case "H": {
                    return PIXI.Sprite.from("hearts");
                }
                case "S": {
                    return PIXI.Sprite.from("spades");
                }
            }
        };
        return Card;
    }(PIXI.Sprite));
    views.Card = Card;
})(views || (views = {}));
//# sourceMappingURL=Game.min.js.map